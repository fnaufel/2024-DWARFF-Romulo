---
title: "Medindo a concordância entre o *ranking* e a *expert list*"
author: "Fernando Náufel"
date: now
date-format: "DD/MM/YYYY HH:mm"
lang: pt

execute: 
  echo: false
  eval: true
  warning: true
  error: true
  include: true

bibliography: bibliography.bib

Português:
csl: universidade-do-porto-faculdade-de-engenharia-chicago-pt-crono.csl

format:
  html:
    toc: true  
    toc-depth: 3
    number-depth: 3
    theme: 
      - journal
      - _custom.scss
    link-external-icon: true
    link-external-newwindow: true
    link-external-filter: ^(?:http:|https:)\/\/fnaufel\.github\.io
    df-print: paged
    code-link: true
    code-copy: true
    code-tools: true
    self-contained: true
---

{{< include _math.qmd >}}

```{r setup, include=FALSE}
source('_setup.R')

set.seed(5432)

# Montar df usando as colunas
montar_df <- function(
    n, 
    pos_ranking = 1:n,
    pos_lista = NULL
) {
  
  if (is.null(pos_lista)) {
    pos_lista <- 1:n
  }
  
  tibble(
    jogador = sample(LETTERS, n),
    pos_lista,
    pos_ranking
  )
  
}

# Montar df usando lista e ranking (mais prático)
montar_df_lista_ranking <- function(
  lista = sample(LETTERS, 6),
  ranking = c(lista, sample(LETTERS[!(LETTERS %in% lista)], 4))
) {
  
  list(lista, ranking)
  # TODO: continuar. Retornar df

}

mostrar_cor <- function(df) {
  
  ro <- with(
    df,
    cor(pos_lista, pos_ranking, method = 'spearman')
  )

  cat('ρ =', ro)
  
}

mostrar_grafico <- function(df) {
  
  df %>% 
    ggplot(aes(pos_lista, pos_ranking)) +
      geom_point() +
      geom_smooth(
        formula = y ~ x,
        method = 'lm',
        se = FALSE
      ) +
      scale_x_continuous(breaks = 1:p, labels = 1:p, limits = c(1, p)) +
      scale_y_continuous(breaks = 1:p, labels = 1:p, limits = c(1, p)) +
      labs(
        x = 'expert list',
        y = 'ranking'
      )
  
}
```



# Apresentação

???


# *Expert list* como conjunto

Aqui, [não existe qualquer ordenação]{.hl} entre os jogadores da *expert list*.


## Exemplo

```{r}
k <- 6
lista <- sample(LETTERS, k)
```

Considere esta *expert list* com [$k = `r k`$]{.hl} jogadores (sem ordem):

```{r}
cat('lista =', lista)
```

Na forma de tabela:

```{r}
df_lista <- tibble(
  jogador = lista,
  pos = sum(1:k)/k
)

df_lista
```

[A princípio]{.hl}, como não existe ordem na lista, todos os jogadores estão empatados, o que faria com que todas as posições fossem iguais a

$$
\frac{\sum_{i = 1}^{`r k`} i}{`r k`} = `r sum(1:k)/k`
$$

::: {.callout-caution title="Atenção"}

Mais adiante, vamos precisar rever estas posições, para evitar que o desvio-padrão seja $0$.

:::

Agora, imagine que temos um *ranking* de todos os $n$ jogadores. Considere o menor prefixo do *ranking* que inclui todos os [$k = `r k`$]{.hl} jogadores da lista (com ordem). Por exemplo:

```{r}
# Letras que sobraram
resto <- LETTERS[!(LETTERS %in% lista)]

# Pior posição no ranking de um jogador da lista
p <- 10 

# Escolher outros jogadores para o ranking
outros <- sample(resto, p - k)

# Escolher um jogador da lista para ser o último
# Se o último do ranking não for da lista, este não seria o menor prefixo!
ultimo <- lista[k]

# Retirar o último da lista
lista_menos_um <- lista[lista != ultimo]

ranking <- c(sample(c(lista_menos_um, outros)), ultimo)
cat('prefixo =', ranking )
```

Este prefixo do *ranking* tem tamanho [$p = `r p`$]{.hl}.

Na forma de tabela:

```{r}
df_ranking <- tibble(
  jogador = ranking,
  pos = 1:p
)

df_ranking
```

Para comparar a lista e o prefixo, precisamos que os dois tenham o mesmo tamanho. Vamos adicionar à lista os jogadores que só estão no prefixo, mas estes novos jogadores terão uma posição pior do que os que já estavam na lista e, como a lista não "sabe" nada sobre eles, estes novos jogadores ficarão empatados entre si.

::: {.callout-caution title="Atenção" #obs1}

Lembre-se de que [a lista não tem ordem]{.hl}. 

O que importa é que os jogadores da lista apareçam no *ranking* (em qualquer ordem!).

Por isso, vamos alterar as posições dos jogadores da lista [de acordo com a ordem]{.hl} em que eles aparecem no *ranking*.

Observe que [apenas a ordem]{.hl} dos jogadores que já estavam na lista concorda com a ordem deles no *ranking* --- [não necessariamente as posições]{.hl}.

:::

A nova lista fica

```{r}
df_lista_ext <- df_lista %>% 
  select(jogador) %>% 
  left_join(df_ranking, by = 'jogador') %>% 
  mutate(
    pos = rank(pos)
  ) %>% 
  arrange(pos) %>% 
  bind_rows(
    tibble(
      jogador = outros,
      pos = sum((k + 1):p) / (p - k)
    )
  )

df_lista_ext
```

Eis a lista e o *ranking*, [agora ambos ordenados]{.hl}:

```{r}
cat('lista   =', df_lista_ext$jogador, '\n')
cat('ranking =', df_ranking$jogador, '\n')
```

Observe que

* A lista original consistia apenas dos $`r k`$ primeiros jogadores desta nova lista.

* A ordem, no *ranking*, destes $`r k`$ primeiros jogadores da lista está preservada, embora eles possam não aparecer de forma consecutiva no *ranking*.

Agora podemos reunir as informações em uma só tabela:

```{r}
df_comparacao <- df_lista_ext %>% 
  rename(pos_lista = pos) %>% 
  left_join(df_ranking, by = 'jogador') %>% 
  rename(pos_ranking = pos)

df_comparacao
```

O valor do coeficiente de correlação ordinal de Spearman ($\rho$) para estas duas ordenações é simplesmente igual ao coeficiente de correlação linear de Pearson ($r$) entre elas (já que os valores são posições):

```{r}
ro <- with(
  df_comparacao,
  cor(pos_lista, pos_ranking, method = 'spearman')
)

cat('ρ =', ro)
```

No gráfico abaixo, cada ponto representa um jogador:

```{r}
df_comparacao %>% 
  ggplot(aes(pos_lista, pos_ranking)) +
    geom_point() +
    geom_smooth(
      formula = y ~ x,
      method = 'lm',
      se = FALSE
    ) +
    scale_x_continuous(breaks = 1:p, labels = 1:p, limits = c(1, p)) +
    scale_y_continuous(breaks = 1:p, labels = 1:p, limits = c(1, p)) +
    labs(
      x = 'expert list',
      y = 'ranking'
    )
```

```{r}
coef_angular <- 
  ro * sd(df_comparacao$pos_lista) / sd(df_comparacao$pos_ranking)
```

O coeficiente angular $m$ da reta de regressão é proporcional a $\rho$. Mais precisamente,

$$
m =
\rho \cdot \frac{\sigma(\text{ranking})}{\sigma(\text{expert list})}
=
`r ro` \cdot 
\frac{`r sd(df_comparacao$pos_lista)`}
{`r sd(df_comparacao$pos_ranking)`}
= 
`r coef_angular`
$$

## Casos extremos

### Total concordância

Neste caso, a lista consiste exatamente do top $k$ do *ranking*, e $p = k$:

```{r}
df <- montar_df(6)
df
```

```{r}
mostrar_cor(df)
```


### Total discordância

Teoricamente, o valor mínimo de $\rho$ é $-1$, que acontece quando uma ordenação é o inverso da outra.

Aqui, por causa das [observações sobre a não-ordenação da lista](#obs1), [esta situação não pode acontecer]{.hl}.

Os casos desfavoráveis vão acontecer quando o *ranking* contiver, nas primeiras $p - k$ posições, [apenas jogadores que não estão na lista]{.hl}:

```{r}
df <- montar_df(10, c(5:10, 1:4), c(1:6, rep(8.5, 4)))
df
```

```{r}
mostrar_cor(df)
```

```{r}
mostrar_grafico(df)
```


## Casos com mesmo $p$ mas diferentes $\rho$

Todos os exemplos até aqui foram com lista de tamanho $k = `r k`$ e prefixo de tamanho $p = `r p`$. 

Vamos continuar com estes valores, mas vamos fazer exemplos com valores diferentes de $\rho$:

* Exemplo:


* Exemplo:


* Exemplo:


# *Expert list* como ordem parcial

