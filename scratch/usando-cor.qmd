
{{< include _math.qmd >}}

```{r setup, include=FALSE}
source('_setup.R')
source('rankings.R')
library(gt)
```

# Distância de Spearman

```{r}
spdist <- function(x, y) {
  
  sum((x - y)^2)
  
}
```


## Incluindo elementos do *ranking* na lista

### Empatados no final

Elementos do *ranking* que não estão na lista ficam todos empatados no fim da lista.

```{r}
calcular_pos_empate_depois_k <- function(um_rk) {
  
  p <- um_rk$p
  k <- um_rk$k
  
  pos_lista = 1:k
  pos_ranking = um_rk$yes
  
  if (p > k) {
  
    pos_lista <- c(pos_lista,  rep((sum((k+1):p) / (p - k)) , p - k))
    pos_ranking <- c(pos_ranking, um_rk$no)
    
  }

  list(
    pos_lista = pos_lista, 
    pos_ranking = pos_ranking
  )
  
}
```

Exemplo:

```{r echo=TRUE}
calcular_pos_empate_depois_k(rk('x--x-x'))
```


### No final, em ordem

Elementos do *ranking* que não estão na lista ficam no fim da lista, na mesma ordem em que aparecem no *ranking*.

```{r}
calcular_pos_em_ordem_depois_k <- function(um_rk) {
  
  p <- um_rk$p
  k <- um_rk$k
  
  pos_lista = 1:k
  pos_ranking = um_rk$yes
  
  if (p > k) {
  
    pos_lista <- c(pos_lista,  (k + 1):p)
    pos_ranking <- c(pos_ranking, um_rk$no)
    
  }

  list(
    pos_lista = pos_lista, 
    pos_ranking = pos_ranking
  )
  
}
```

Exemplo:

```{r echo=TRUE}
calcular_pos_em_ordem_depois_k(rk('x--x-x'))
```

```{r}
exemplos_s <- function(k, maxp, score) {
  
  criar_df_rankings(k = k, maxp = maxp) %>% 
    mutate(s = score(ranking)) %>% 
    arrange(s) %>% 
    select(ranking_str, s, p)
  
}
```


## Exemplos

### Empatados no final

```{r}
sp1 <- function(um_rk) {
  
  c(pos_lista, pos_ranking) %<-% calcular_pos_empate_depois_k(um_rk) 
  k <- um_rk$k
  p <- um_rk$p
  
  spdist(pos_lista, pos_ranking)

}

sp <- function(rk) {

  if (is.rk(rk)) {
    sp1(rk)
  } else {
    rk %>% map_dbl(sp1)
  }

}
```

```{r}
ex_3_6_empate <- exemplos_s(
  k = 3, 
  maxp = 6, 
  score = sp
) 

ex_3_6_empate %>% 
  gt() %>% 
  tab_style_body(cell_text(font = 'monospace'), pattern = '.')
```

```{r}
ex_2_10_empate <- exemplos_s(
  k = 2, 
  maxp = 10, 
  score = sp
)

ex_2_10_empate %>% 
  gt() %>% 
  tab_style_body(cell_text(font = 'monospace'), pattern = '.')  
```



### Em ordem no final

```{r}
sp2 <- function(um_rk) {
  
  c(pos_lista, pos_ranking) %<-% calcular_pos_em_ordem_depois_k(um_rk) 
  k <- um_rk$k
  p <- um_rk$p

  spdist(pos_lista, pos_ranking)

}

sp_em_ordem <- function(rk) {

  if (is.rk(rk)) {
    sp2(rk)
  } else {
    rk %>% map_dbl(sp2)
  }

}
```

```{r}
ex_3_6_ordem <- exemplos_s(
  k = 3, 
  maxp = 6, 
  score = sp
) 

ex_3_6_ordem %>% 
  gt() %>% 
  tab_style_body(cell_text(font = 'monospace'), pattern = '.')  
```

```{r}
ex_2_10_ordem <- exemplos_s(
  k = 2, 
  maxp = 10, 
  score = sp_em_ordem
) 

ex_2_10_ordem %>% 
  gt() %>% 
  tab_style_body(cell_text(font = 'monospace'), pattern = '.')  
```


### Comparando

```{r echo=TRUE}
identical(ex_3_6_empate$ranking_str, ex_3_6_ordem$ranking_str)
identical(ex_2_10_empate$ranking_str, ex_2_10_ordem$ranking_str)
```

```{r}
comparar_3_6 <- ex_3_6_empate %>% 
  left_join(
    ex_3_6_ordem,
    by = 'ranking_str'
  ) %>% 
  select(-starts_with('p'))

comparar_3_6 %>%   
  gt() %>% 
  tab_style_body(cell_text(font = 'monospace'), pattern = '.')  
```

*Scores* iguais com empatados no final ($k = 3$, até $p = 6$):

```{r}
comparar_3_6 %>% 
  count(s.x) %>% 
  filter(n > 1)
```

*Scores* iguais com ordenados no final ($k = 3$, até $p = 6$):

```{r}
comparar_3_6 %>% 
  count(s.y) %>% 
  filter(n > 1)
```

```{r}
comparar_2_10 <- ex_2_10_empate %>% 
  left_join(
    ex_2_10_ordem,
    by = 'ranking_str'
  ) %>% 
  select(-starts_with('p'))

comparar_2_10 %>%   
  gt() %>% 
  tab_style_body(cell_text(font = 'monospace'), pattern = '.')  
```

*Scores* iguais com empatados no final ($k = 2$, até $p = 10$):

```{r}
comparar_2_10 %>% 
  count(s.x) %>% 
  filter(n > 1)
```

*Scores* iguais com ordenados no final ($k = 2$, até $p = 10$):

```{r}
comparar_2_10 %>% 
  count(s.y) %>% 
  filter(n > 1)
```

