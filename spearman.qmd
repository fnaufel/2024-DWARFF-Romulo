
{{< include _math.qmd >}}

```{r setup, include=FALSE}
source('_setup.R')
source('rankings.R')
library(gghalves)
library(glue)
conflict_prefer('lag', 'dplyr')
conflict_prefer('lead', 'dplyr')
```

# O *ranking* concorda com a lista? Correlação

```{r}
s1 <- function(um_rk) {
  
  p <- um_rk$p
  k <- um_rk$k
  
  pos_lista = 1:k
  pos_ranking = um_rk$yes
  
  if (p > k) {
  
    pos_lista <- c(pos_lista,  rep((sum((k+1):p) / (p - k)) , p - k))
    pos_ranking <- c(pos_ranking, um_rk$no)
    
  }
  
  cor(pos_lista, pos_ranking, method = 'spearman')

}

s <- function(rk) {

  if (is.rk(rk)) {
    s1(rk)
  } else {
    rk %>% map_dbl(s1)
  }

}
```

```{r echo=TRUE}
r <- rk('xxx-x')
s(r)
```

Para $p = 8$, alguns exemplos:

```{r echo=TRUE}
s(
  list(
    rk('xxxxxxxx'),
    rk('xxxxxx-x'),
    rk('-xxxxxxx')
  )
)
```

Eis todos os *rankings* de comprimento $8$, com suas pontuações:

```{r}
df <- criar_df_rankings(8) %>% 
  mutate(
    s = s(ranking)
  ) %>% 
  arrange(desc(s))

df
```

Perceba que pode haver empates: 

```{r}
empates <- df %>% 
  add_count(s) %>% 
  filter(n > 1) %>% 
  arrange(desc(s))

empates %>% 
  select(ranking_str, s)
```

```{r}
graficos <- empates %>% 
  slice_max(s, n = 1) %>% 
  pull(ranking) %>% 
  map(~ plot(., s1))

graficos %>% walk(print)
```

```{r}
graficos <- empates %>% 
  slice_min(s, n = 1) %>% 
  pull(ranking) %>% 
  map(~ plot(., s1))

graficos %>% walk(print)
```

### Comparando *rankings* com valores diferentes de $p$ 

Como a lista é dada e fixa, só faz sentido, na prática, comparar *rankings* com o mesmo valor de $k$.

```{r}
p <- 15:20
k <- 15

df <- map(p, ~ criar_df_rankings(.x, k)) %>% 
  bind_rows() %>% 
  mutate(
    s = s(ranking),
    p = ranking %>% map_int(~ .$p)
  ) %>% 
  arrange(desc(s))
```

Vamos examinar, para uma lista com $k = 15$, os *rankings* possíveis com $p$ variando de $15$ a $20$. 

São $`r nrow(df)`$ *rankings*. Eis os $100$ melhores:

```{r}
df %>% head(100)
```

Os gráficos abaixo mostram os *scores* atribuídos para todos os *rankings* com $k = 15$ e $p$ variando de $15$ a $20$, separados por valores de $p$:

```{r}
df %>%
  ggplot() +
    geom_boxplot(
      aes(x = p, y = s, group = p, fill = factor(p)),
      show.legend = FALSE
    ) +
    scale_x_continuous(breaks = 15:20) +
    labs(
      title = 'Scores de todos os rankings',
      subtitle = 'com k = 15,  p = 15 a 20',
      y = 'score'
    )
```

```{r}
df %>% 
  filter(p < 18) %>% 
  group_by(p) %>% 
  arrange(s) %>% 
  mutate(id = 1:n()) %>% 
  ungroup() %>% 
  ggplot() +
    geom_point(
      aes(id, s, color = factor(p)),
      size = 2
    ) +
    # scale_x_continuous(breaks = NULL) +
    # scale_y_continuous(limits = c(.875, NA)) +
    labs(
      color = 'p',
      x = 'ranking',
      y = 'score',
      title = 'Scores de todos os rankings',
      subtitle = 'com k = 15,  p = 15 a 17'
    )
```

```{r}
df %>% 
  filter(p >= 18) %>% 
  group_by(p) %>% 
  arrange(s) %>% 
  mutate(id = 1:n()) %>% 
  ungroup() %>% 
  ggplot() +
    geom_point(
      aes(id, s, color = factor(p)),
      size = 2
    ) +
    # scale_x_continuous(breaks = NULL) +
    # scale_y_continuous(limits = c(.75, NA)) +
    labs(
      color = 'p',
      x = 'ranking',
      y = 'score',
      title = 'Scores de todos os rankings',
      subtitle = 'com k = 15,  p = 18 a 20'
    )
```

Negativos:

```{r}
df %>% 
  filter(s < 0) %>% 
  group_by(p) %>% 
  arrange(s) %>% 
  mutate(id = 1:n()) %>% 
  ungroup() %>% 
  ggplot() +
    geom_point(
      aes(id, s, color = factor(p)),
      size = 2
    ) +
    # scale_x_continuous(breaks = NULL) +
    # scale_y_continuous(limits = c(.75, NA)) +
    labs(
      color = 'p',
      x = 'ranking',
      y = 'score',
      title = 'Scores negativos',
    )

```


