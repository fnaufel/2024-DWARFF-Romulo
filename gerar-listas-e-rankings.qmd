---
title: "Funções para gerar exemplos"
author: "Fernando Náufel"
date: now
date-format: "DD/MM/YYYY HH:mm"
lang: pt

execute: 
  echo: false
  eval: true
  warning: true
  error: true
  include: true

bibliography: bibliography.bib

Português:
csl: universidade-do-porto-faculdade-de-engenharia-chicago-pt-crono.csl

format:
  html:
    toc: true  
    toc-depth: 3
    number-depth: 3
    theme: 
      - journal
      - _custom.scss
    link-external-icon: true
    link-external-newwindow: true
    link-external-filter: ^(?:http:|https:)\/\/fnaufel\.github\.io
    df-print: paged
    code-link: true
    code-copy: true
    code-tools: true
    self-contained: true
---

{{< include _math.qmd >}}

```{r setup, include=FALSE}
source('_setup.R')
library(gt)
```


# Problema

Condições:

* A *expert list* (lista) tem $k$ elementos, $k > 0$, não necessariamente ordenados.

* O *ranking* tem $p$ elementos, $p \geq k$, ordenados, sem empates.

* Todos os elementos da lista estão no *ranking*.

* O último elemento do *ranking* é elemento da lista.

Dadas estas condições, desenvolver funções para

* Criar exemplos com pares de listas e *rankings*, cada par em uma *tibble*.

* Construir tabelas coloridas mostrando as posições dos elementos da lista no *ranking*.

* Calcular diferentes medidas de correlação entre lista e *ranking*.

* Construir gráficos.


# Criando exemplos

## Quantidade de exemplos

Dados $k > 0$ e $p \geq k$ fixos, quantos exemplos existem?

A lista é $L = \{ a_1, \ldots, a_k \}$.

Para montar um *ranking*:

1. Escolher um elemento da lista para ser o último do *ranking*:

   $k$ escolhas.
   
1. Escolher a ordenação dos $k - 1$ elementos restantes da lista:

   $(k - 1)!$ escolhas.
   
1. Escolher as posições dos $k - 1$ elementos restantes da lista dentre as $p - 1$ posições restantes no *ranking*:

   $\binom{p - 1}{k - 1}$ escolhas.
   
Quantidade total de *rankings*:

$$
k \cdot (k - 1)! \cdot \binom{p - 1}{k - 1} 
\quad=\quad
k! \cdot \binom{p - 1}{k - 1}
$$

::: {.callout-note title="Atenção"}

[Os cálculos consideram os $p - k$ elementos do *ranking* que não estão na lista como indistinguíveis]{.hl}. 

Só a presença deles importa, a identidade não.

Veja o exemplo a seguir, onde estes elementos são escritos como "?".

* A lista tem $k = 2$ elementos, chamados de $a$ e $b$.

* O *ranking* tem $p = 4$ elementos.

* Os $6$ *rankings* possíveis são

  * $?\;?\;a\;b$
  * $?\;a\;?\;b$
  * $a\;?\;?\;b$
  * $?\;?\;b\;a$
  * $?\;b\;?\;a$
  * $b\;?\;?\;a$

:::

Quantidades de *rankings*:

```{r cache=TRUE}
df <- expand_grid(
  k = 1:10,
  p = 1:20
) %>% 
  filter(p >= k) %>% 
  mutate(
    exemplos = factorial(k) * choose(p - 1, k - 1)
  )
```

```{r cache=TRUE}
df %>% 
  pivot_wider(
    names_from = k,
    names_sort = TRUE,
    values_from = exemplos,
    values_fill = NA
  ) %>% 
  gt(rowname_col = 'p') %>%
    tab_stubhead(label = md('$p$')) %>% 
    tab_spanner(label = md('$k$'), columns = everything()) %>% 
    fmt_number(sep_mark = '.', dec_mark = ',', decimals = 0) %>% 
    sub_missing(missing_text = '') %>% 
    tab_style(
      cell_text(align = 'left'),
      cells_column_spanners()
    )
```


## Criar uma lista com letras maiúsculas

```{r echo=TRUE}
criar_lista <- function(k) {
  
  stopifnot('Argumento deve ser > 0.' = k > 0)
  sample(LETTERS, k)
  
}
```

```{r echo=TRUE}
criar_lista(10)
```


## Criar um *ranking* a partir de uma lista

A função vai receber a lista, um vetor com as posições dos elementos da lista no *ranking*, e o tamanho $p$ do ranking.

A função retorna um vetor com o *ranking*, onde os elementos que não estavam na lista são escritos como "?".

```{r echo=TRUE}
criar_ranking <- function(lista, posicoes, p) {
  
  # Verificar se posicoes contêm só números entre 1 e p, sem repetições
  stopifnot(
    'Posições precisam estar entre 1 e p, sem repetições.' =
    all(between(posicoes, 1, p)) & identical(posicoes, unique(posicoes))
  )
  
  # Verificar se posicoes contém p (o último do ranking tem q ser da lista)
  stopifnot(
    'O último do ranking precisa ser da lista' = p %in% posicoes
  )
  
  ranking <- rep('?', p)
  ranking[posicoes] <- lista
  ranking
  
}
```

```{r}
criar_ranking(
  LETTERS[1:4],
  c(2, 6, 1, 3),
  6
)
```


# Visualizando exemplos

## Como *tibble*

```{r}

```


## Como tabela

## Como gráfico
