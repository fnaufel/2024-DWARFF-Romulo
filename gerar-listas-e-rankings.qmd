
{{< include _math.qmd >}}

```{r setup, include=FALSE}
source('_setup.R')
source('funcoes.R')
```

# Listas e *rankings*

## Problema

Vamos trabalhar com listas e *rankings* sujeitos às seguintes condições:

* A [lista]{.hl} tem $k$ elementos, $k > 0$, [não ordenados]{.hl}.

* O [*ranking*]{.hl} tem $p$ elementos, $p \geq k$, [ordenados]{.hl}, [sem empates]{.hl}.

* Todos os elementos da lista também pertencem ao *ranking*.

* O último elemento do *ranking* sempre pertence à lista.

* As identidades dos elementos do *ranking* não importam --- i.e., eles são indistinguíveis, a não ser por pertencerem ou não à lista (e pela ordem que ocupam no *ranking*, claro). 


## Criando *rankings*

### Quantidade de *rankings*

Dados $k > 0$ e $p \geq k$ fixos, quantos *rankings* existem?

Para montar um *ranking*:

1. Sabemos que a última posição é ocupada por alguém da lista.

1. Só resta escolher as posições dos $k - 1$ elementos restantes da lista dentre as $p - 1$ posições restantes no *ranking*, o que dá $\binom{p - 1}{k - 1}$ escolhas.
   
Assim, a quantidade total de *rankings* para $k$ e $p$ dados é

$$
\binom{p - 1}{k - 1}
$$

### Representação {#sec-repr}

Considere naturais $k > 0$ e $p \geq k$. 

[Podemos representar um *ranking* através de um *string* contendo $k$ caracteres "`x`" e $p - k$ caracteres "`-`"]{.hl}.

"`x`" representa uma posição ocupada por um elemento da lista.

"`-`" representa uma posição ocupada por um elemento que não está na lista.

Por exemplo, para $k = 3, p = 5$, os $\binom{4}{2} = 6$ *rankings* possíveis são

  * `xx--x`
  * `x-x-x`
  * `x--xx`
  * `-xx-x`
  * `-x-xx`
  * `--xxx`

A tabela a seguir (na verdade, um pedaço do triângulo de Pascal) mostra as quantidades de *rankings* possíveis para alguns valores de $k$ e $p$:

```{r cache=TRUE}
df <- expand_grid(
  k = 1:10,
  p = 1:30
) %>% 
  filter(p >= k) %>% 
  mutate(
    n_rankings = choose(p - 1, k - 1)
  )
```

```{r cache=TRUE}
df %>% 
  pivot_wider(
    names_from = k,
    names_sort = TRUE,
    values_from = n_rankings,
    values_fill = NA
  ) %>% 
  gt(rowname_col = 'p') %>%
    tab_stubhead(label = md('$p$')) %>% 
    tab_spanner(label = md('$k$'), columns = everything()) %>% 
    fmt_number(sep_mark = '.', dec_mark = ',', decimals = 0) %>% 
    sub_missing(missing_text = '') %>% 
    tab_style(
      cell_text(align = 'left'),
      cells_column_spanners()
    )
```


### Criar um *ranking* a partir de um vetor

Em vez de especificar as $p$ posições do *ranking*, [pode ser mais compacto especificar as $k$ posições do *ranking* que são ocupadas por elementos da lista]{.hl}.

A função `rk()` faz isso, recebendo um vetor numérico com $k$ elementos e retornando um *string*.

```{r echo=TRUE}
rk(c(1, 3, 5, 7))
```

Observe que as posições não precisam ser passadas em ordem:

```{r echo=TRUE}
rk(c(3, 7, 5, 1))
```

A função detecta vetores que não podem representar *rankings*:

```{r echo=TRUE}
rk(c(3, 7, 3, 1))
```

```{r echo=TRUE}
rk(c(5, 7, 3, 1.5))
```

```{r echo=TRUE}
rk(c(5, -7, 3, 1))
```


## Outras funções

### Converter para *tibble*

Para calcular a correlação entre a lista e o *ranking*, vamos precisar ordenar a lista de alguma forma, pois, se todos os elementos da lista estiverem empatados (i.e., se todos tiverem o mesmo valor de posição), vamos cair em um caso em que o desvio-padrão é $0$ (quando o *ranking* só contiver jogadores da lista).

Dado um *ranking*, a maneira mais conveniente de ordenar a lista afetando a correlação de forma previsível é concordando com o *ranking*! Isto vai ficar mais claro mais adiante.

Além disso, os elementos que não estavam na lista mas estão no *ranking*, se existirem, também precisam entrar na *tibble*.

Eles vão entrar todos empatados no fim da lista, como no exemplo mais abaixo.

A função `criar_df()` recebe o *string* correspondente a um *ranking* e retorna uma *tibble* com as colunas `nome`, `pos_lista` e `pos_ranking`.

```{r echo=TRUE}
r = 'x-x-x-xx'
df <- criar_df(r)
df
```

A partir da *tibble*, o *string* do *ranking* pode ser recuperado com

```{r echo=TRUE}
df_string(df)
```


### Criar *plot*

A função `criar_plot` recebe um *ranking*, na forma de *string* ou de *tibble*.

A função gera um gráfico de pontos, com um ponto para cada elemento. 

No eixo $x$, a posição do elemento na lista.

No eixo $y$, a posição do elemento no *ranking*.

A função `criar_plot` pode receber um segundo argumento, opcional, especificando uma função para calcular o *score* deste *ranking* (i.e., alguma forma de correlação entre o *ranking* e a lista). O *score* vai ser mostrado no título do gráfico.

O terceiro argumento especifica se deve ser incluída uma reta de regressão linear via mínimos quadrados. O *default* é `TRUE`.

```{r echo=TRUE}
r <- 'x-x-x-xx'
criar_plot(r)
```

```{r echo=TRUE}
criar_plot(r, reta = FALSE)
```

```{r echo=TRUE}
criar_plot(r, \(df) { cor(df$pos_lista, df$pos_ranking) %>% round(2) })
```


### Criar uma tibble com todos os *rankings*

Dados valores de $p$ e $k$ (nesta ordem), a função `criar_df_rankings()` retorna uma *tibble* com todos os $\binom{p - 1}{k - 1}$ *rankings* possíveis.

Se for passado apenas o valor de $p$, a função retorna uma *tibble* com todos os *rankings* possíveis de comprimento $p$ (com $k$ variando de $1$ até $p$). Exercício: quantos são?

Cada *ranking* é representado por um *string*, como descrito na [seção sobre a representação de *rankings*](#sec-repr).

Todos os *rankings* com $p = 8$ e $k = 5$:

```{r echo=TRUE}
criar_df_rankings(8, 5)
```

Todos os *rankings* com $p = 5$:

```{r echo=TRUE}
criar_df_rankings(5)
```

