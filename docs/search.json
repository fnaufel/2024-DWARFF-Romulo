[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Comparando listas e rankings",
    "section": "",
    "text": "Apresentação\n???",
    "crumbs": [
      "Apresentação"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html",
    "href": "gerar-listas-e-rankings.html",
    "title": "\n1  Gerar e visualizar rankings\n",
    "section": "",
    "text": "1.1 Problema\nVamos trabalhar com listas e rankings sujeitos às seguintes condições:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Gerar e visualizar *rankings*</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#problema",
    "href": "gerar-listas-e-rankings.html#problema",
    "title": "\n1  Gerar e visualizar rankings\n",
    "section": "",
    "text": "A lista tem \\(k\\) elementos, \\(k &gt; 0\\), não ordenados.\nO ranking tem \\(p\\) elementos, \\(p \\geq k\\), ordenados, sem empates.\nTodos os elementos da lista estão no ranking.\nO último elemento do ranking é elemento da lista.\nAs identidades dos elementos do ranking não importam — i.e., eles são indistinguíveis, a não ser por pertencerem ou não à lista (e pela ordem que ocupam no ranking, claro).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Gerar e visualizar *rankings*</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#criando-rankings",
    "href": "gerar-listas-e-rankings.html#criando-rankings",
    "title": "\n1  Gerar e visualizar rankings\n",
    "section": "\n1.2 Criando rankings\n",
    "text": "1.2 Criando rankings\n\nQuantidade de rankings\n\nDados \\(k &gt; 0\\) e \\(p \\geq k\\) fixos, quantos rankings existem?\nPara montar um ranking:\n\nSabemos que a última posição é ocupada por alguém da lista.\nSó resta escolher as posições dos \\(k - 1\\) elementos restantes da lista dentre as \\(p - 1\\) posições restantes no ranking, o que dá \\(\\binom{p - 1}{k - 1}\\) escolhas.\n\nAssim, a quantidade total de rankings para \\(k\\) e \\(p\\) dados é\n\\[\n\\binom{p - 1}{k - 1}\n\\]\nRepresentação\nConsidere naturais \\(k &gt; 0\\) e \\(p \\geq k\\).\nPodemos representar um ranking através de um string contendo \\(k\\) caracteres “x” e \\(p - k\\) caracteres “-”.\n“x” representa uma posição ocupada por um elemento da lista.\n“-” representa uma posição ocupada por um elemento que não está na lista.\nPor exemplo, para \\(k = 3, p = 5\\), os \\(\\binom{4}{2} = 6\\) rankings possíveis são\n\nxx--x\nx-x-x\nx--xx\n-xx-x\n-x-xx\n--xxx\n\nA tabela a seguir (na verdade, um pedaço do triângulo de Pascal) mostra as quantidades de rankings possíveis para alguns valores de \\(k\\) e \\(p\\):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(p\\)\n\\(k\\)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n2\n1\n1\n\n\n\n\n\n\n\n\n\n\n3\n1\n2\n1\n\n\n\n\n\n\n\n\n\n4\n1\n3\n3\n1\n\n\n\n\n\n\n\n\n5\n1\n4\n6\n4\n1\n\n\n\n\n\n\n\n6\n1\n5\n10\n10\n5\n1\n\n\n\n\n\n\n7\n1\n6\n15\n20\n15\n6\n1\n\n\n\n\n\n8\n1\n7\n21\n35\n35\n21\n7\n1\n\n\n\n\n9\n1\n8\n28\n56\n70\n56\n28\n8\n1\n\n\n\n10\n1\n9\n36\n84\n126\n126\n84\n36\n9\n1\n\n\n11\n1\n10\n45\n120\n210\n252\n210\n120\n45\n10\n\n\n12\n1\n11\n55\n165\n330\n462\n462\n330\n165\n55\n\n\n13\n1\n12\n66\n220\n495\n792\n924\n792\n495\n220\n\n\n14\n1\n13\n78\n286\n715\n1.287\n1.716\n1.716\n1.287\n715\n\n\n15\n1\n14\n91\n364\n1.001\n2.002\n3.003\n3.432\n3.003\n2.002\n\n\n16\n1\n15\n105\n455\n1.365\n3.003\n5.005\n6.435\n6.435\n5.005\n\n\n17\n1\n16\n120\n560\n1.820\n4.368\n8.008\n11.440\n12.870\n11.440\n\n\n18\n1\n17\n136\n680\n2.380\n6.188\n12.376\n19.448\n24.310\n24.310\n\n\n19\n1\n18\n153\n816\n3.060\n8.568\n18.564\n31.824\n43.758\n48.620\n\n\n20\n1\n19\n171\n969\n3.876\n11.628\n27.132\n50.388\n75.582\n92.378\n\n\n21\n1\n20\n190\n1.140\n4.845\n15.504\n38.760\n77.520\n125.970\n167.960\n\n\n22\n1\n21\n210\n1.330\n5.985\n20.349\n54.264\n116.280\n203.490\n293.930\n\n\n23\n1\n22\n231\n1.540\n7.315\n26.334\n74.613\n170.544\n319.770\n497.420\n\n\n24\n1\n23\n253\n1.771\n8.855\n33.649\n100.947\n245.157\n490.314\n817.190\n\n\n25\n1\n24\n276\n2.024\n10.626\n42.504\n134.596\n346.104\n735.471\n1.307.504\n\n\n26\n1\n25\n300\n2.300\n12.650\n53.130\n177.100\n480.700\n1.081.575\n2.042.975\n\n\n27\n1\n26\n325\n2.600\n14.950\n65.780\n230.230\n657.800\n1.562.275\n3.124.550\n\n\n28\n1\n27\n351\n2.925\n17.550\n80.730\n296.010\n888.030\n2.220.075\n4.686.825\n\n\n29\n1\n28\n378\n3.276\n20.475\n98.280\n376.740\n1.184.040\n3.108.105\n6.906.900\n\n\n30\n1\n29\n406\n3.654\n23.751\n118.755\n475.020\n1.560.780\n4.292.145\n10.015.005\n\n\n\n\n\n\nCriar um ranking a partir de um vetor\nEm vez de especificar as \\(p\\) posições do ranking, pode ser mais compacto especificar as \\(k\\) posições do ranking que são ocupadas por elementos da lista.\nA função rk() faz isso, recebendo um vetor numérico com \\(k\\) elementos e retornando um string.\n\nrk &lt;- function(v) {\n  \n  k &lt;- length(v)\n  p &lt;- max(v)   # o último elemento pertence à lista\n  \n  # Verificar se posicoes contêm só números entre 1 e p, sem repetições\n  stopifnot(\n    'Valores precisam ser inteiros positivos, sem repetições.' =\n    all(v == as.integer(v)) & \n      all(v &gt; 0) &\n      identical(v, unique(v))\n  )\n\n  s &lt;- rep('-', p)\n  s[v] &lt;- 'x'\n  \n  paste0(s, collapse = '')\n  \n}\n\n\nrk(c(1, 3, 5, 7))\n\n[1] \"x-x-x-x\"\n\n\nObserve que as posições não precisam ser passadas em ordem:\n\nrk(c(3, 7, 5, 1))\n\n[1] \"x-x-x-x\"\n\n\nA função detecta vetores que não podem representar rankings:\n\nrk(c(3, 7, 3, 1))\n\nError in rk(c(3, 7, 3, 1)): Valores precisam ser inteiros positivos, sem repetições.\n\n\n\nrk(c(5, 7, 3, 1.5))\n\nError in rk(c(5, 7, 3, 1.5)): Valores precisam ser inteiros positivos, sem repetições.\n\n\n\nrk(c(5, -7, 3, 1))\n\nError in rk(c(5, -7, 3, 1)): Valores precisam ser inteiros positivos, sem repetições.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Gerar e visualizar *rankings*</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#outras-funções",
    "href": "gerar-listas-e-rankings.html#outras-funções",
    "title": "\n1  Gerar e visualizar rankings\n",
    "section": "\n1.3 Outras funções",
    "text": "1.3 Outras funções\nConverter para tibble\n\nPara calcular a correlação entre a lista e o ranking, vamos precisar ordenar a lista de alguma forma, pois, se todos os elementos da lista estiverem empatados (i.e., se todos tiverem o mesmo valor de posição), vamos cair em um caso em que o desvio-padrão é \\(0\\) (quando o ranking só contiver jogadores da lista).\nDado um ranking, a maneira mais conveniente de ordenar a lista afetando a correlação de forma previsível é concordando com o ranking! Isto vai ficar mais claro mais adiante.\nAlém disso, os elementos que não estavam na lista mas estão no ranking, se existirem, também precisam entrar na tibble.\nEles vão entrar todos empatados no fim da lista, como no exemplo mais abaixo.\nA função criar_df() recebe o string correspondente a um ranking e retorna uma tibble com as colunas elemento, pos_lista e pos_ranking.\n\ncriar_df &lt;- function(ranking) {\n  \n  stopifnot(\n    'Argumento deve conter apenas \"x\" e \"-\", terminando com \"x\".' =\n    str_detect(ranking, '[-x]+') & endsWith(ranking, 'x')\n  )\n  \n  # Separar caracteres. \n  # De agora em diante, é vetor:\n  ranking &lt;- str_split(ranking, '')[[1]]\n  \n  p &lt;- length(ranking)\n  lista &lt;- ranking[ranking == 'x']\n  k &lt;- length(lista)\n  pos_lista &lt;- 1:k\n  pos_ranking &lt;- which(ranking %in% lista)\n  \n  # Linhas da tibble com elementos da lista\n  df &lt;- tibble(\n    nome = lista,\n    pos_lista = pos_lista,\n    pos_ranking = pos_ranking\n  )\n  \n  if (p &gt; k) {\n    \n    # Linhas da tibble com outros elementos\n    nomes &lt;- rep('-', p - k)\n    pos_lista &lt;- rep((sum((k+1):p) / (p - k)) , p - k)\n    pos_ranking &lt;- which(!(ranking %in% lista))\n    \n    df &lt;- df %&gt;% \n      bind_rows(\n        tibble(\n          nome = nomes,\n          pos_lista = pos_lista,\n          pos_ranking = pos_ranking\n        )\n      ) %&gt;% \n      arrange(pos_ranking)\n      \n  }\n  \n  df\n  \n}\n\n\nr = 'x-x-x-xx'\ndf &lt;- criar_df(r)\ndf\n\n\n  \n\n\n\nA partir da tibble, o string do ranking pode ser recuperado com\n\ndf$nome %&gt;% paste0(collapse = '')\n\n[1] \"x-x-x-xx\"\n\n\nA função df_string() faz isto:\n\ndf_string &lt;- function(df) {\n  \n  df$nome %&gt;% paste0(collapse = '')\n  \n}\n\n\ndf_string(df)\n\n[1] \"x-x-x-xx\"\n\n\nCriar plot\n\nA função criar_plot recebe um ranking, na forma de string ou de tibble.\nA função gera um gráfico de pontos, com um ponto para cada elemento.\nNo eixo \\(x\\), a posição do elemento na lista.\nNo eixo \\(y\\), a posição do elemento no ranking.\nA função criar_plot pode receber um segundo argumento, opcional, especificando uma função para calcular o score deste ranking (i.e., alguma forma de correlação entre o ranking e a lista). O score vai ser mostrado no título do gráfico.\nO terceiro argumento especifica se deve ser incluída uma reta de regressão linear via mínimos quadrados. O default é TRUE.\n\ncriar_plot &lt;- function(ranking, fun = NULL, reta = TRUE) {\n  \n  if (!is_tibble(ranking)) {\n    ranking &lt;- criar_df(ranking)\n  }\n  \n  df &lt;- ranking\n  p &lt;- nrow(df)\n  \n  grafico &lt;- df %&gt;% \n    ggplot(aes(pos_lista, pos_ranking)) +\n      geom_point() +\n      scale_x_continuous(breaks = 1:p, labels = 1:p, limits = c(1, p)) +\n      scale_y_continuous(breaks = 1:p, labels = 1:p, limits = c(1, p)) +\n      labs(\n        x = 'lista',\n        y = 'ranking'\n      )\n  \n  if (!is.null(fun)) {\n    score &lt;- do.call(fun, list(df))\n    grafico &lt;- grafico + labs(title = paste0('Score = ', score))\n  }\n  \n  if (reta) {\n    grafico &lt;- grafico +\n      geom_smooth(\n        formula = y ~ x,\n        method = 'lm',\n        se = FALSE\n      )\n  }\n  \n  grafico\n\n}\n\n\nr &lt;- 'x-x-x-xx'\ncriar_plot(r)\n\n\n\n\n\n\n\n\ncriar_plot(r, reta = FALSE)\n\n\n\n\n\n\n\n\ncriar_plot(r, \\(df) { cor(df$pos_lista, df$pos_ranking) %&gt;% round(2) })\n\n\n\n\n\n\n\nCriar uma tibble com todos os rankings\n\nDados valores de \\(k\\) e \\(p\\), a função criar_df_rankings() retorna uma tibble com todos os \\(\\binom{p - 1}{k - 1}\\) rankings possíveis.\nCada ranking é representado por um string, como descrito na Seção 1.2.2.\n???",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Gerar e visualizar *rankings*</span>"
    ]
  }
]