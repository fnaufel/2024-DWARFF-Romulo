[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Comparando listas e rankings",
    "section": "",
    "text": "Apresentação\n???",
    "crumbs": [
      "Apresentação"
    ]
  },
  {
    "objectID": "temporadas-2014-2023.html",
    "href": "temporadas-2014-2023.html",
    "title": "\n1  Temporadas 2014 a 2023\n",
    "section": "",
    "text": "1.1 Leitura\nPara cada jogador, a coluna all_nba diz se ele foi para a expert list ou não.\nA expert list está sendo considerada um conjunto, sem ordem.\ndf &lt;- read_csv(\n  'dados/j-years-with-all-nba.csv'\n) %&gt;% \n  clean_names()\n\nRows: 1318 Columns: 52\n── Column specification ────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Player, Pos, Tm\ndbl (49): Age, G, GS, MP, FG, FGA, FG%, 3P, 3PA, 3P%, 2P, 2PA, 2P%, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ndf %&gt;% dfSummary() %&gt;% print(method = 'render')\n\ntemporary images written to '/home/fnaufel/Documents/DataAnalysis/NBA-Orlando/2024-DWARFF-Romulo/dfimg'\n\n\n\n\n\n\n\n\n\n\n\n\n\nVariável\nEstatísticas / Valores\nFreqs (% de Válidos)\nGrafo\nFaltante\n\n\n\nplayer [character]\n\n\n1. Anthony Davis\n\n\n2. Bradley Beal\n\n\n3. Chris Paul\n\n\n4. DeMar DeRozan\n\n\n5. Draymond Green\n\n\n6. Giannis Antetokounmpo\n\n\n7. Gordon Hayward\n\n\n8. Harrison Barnes\n\n\n9. James Harden\n\n\n10. Jimmy Butler\n\n\n[ 525 outros ]\n\n\n\n\n6\n(\n0,5%\n)\n\n\n6\n(\n0,5%\n)\n\n\n6\n(\n0,5%\n)\n\n\n6\n(\n0,5%\n)\n\n\n6\n(\n0,5%\n)\n\n\n6\n(\n0,5%\n)\n\n\n6\n(\n0,5%\n)\n\n\n6\n(\n0,5%\n)\n\n\n6\n(\n0,5%\n)\n\n\n6\n(\n0,5%\n)\n\n\n1258\n(\n95,4%\n)\n\n\n\n0 (0,0%)\n\n\npos [character]\n\n\n1. SG\n\n\n2. PG\n\n\n3. PF\n\n\n4. SF\n\n\n5. C\n\n\n6. SF-SG\n\n\n7. SG-PG\n\n\n8. SF-PF\n\n\n9. SG-SF\n\n\n10. PF-SF\n\n\n[ 4 outros ]\n\n\n\n\n318\n(\n24,1%\n)\n\n\n271\n(\n20,6%\n)\n\n\n261\n(\n19,8%\n)\n\n\n232\n(\n17,6%\n)\n\n\n213\n(\n16,2%\n)\n\n\n7\n(\n0,5%\n)\n\n\n4\n(\n0,3%\n)\n\n\n3\n(\n0,2%\n)\n\n\n3\n(\n0,2%\n)\n\n\n2\n(\n0,2%\n)\n\n\n4\n(\n0,3%\n)\n\n\n\n0 (0,0%)\n\n\nage [numeric]\n\n\nMédia (dp) : 26,3 (4,1)\n\n\nmín &lt; mediana &lt; máx:\n\n\n19 &lt; 26 &lt; 42\n\n\nIQE (CV) : 6 (0,2)\n\n\n22 valores distintos\n\n0 (0,0%)\n\n\ntm [character]\n\n\n1. LAL\n\n\n2. LAC\n\n\n3. ATL\n\n\n4. DEN\n\n\n5. MIA\n\n\n6. PHI\n\n\n7. TOR\n\n\n8. IND\n\n\n9. MEM\n\n\n10. NYK\n\n\n[ 21 outros ]\n\n\n\n\n54\n(\n4,1%\n)\n\n\n53\n(\n4,0%\n)\n\n\n48\n(\n3,6%\n)\n\n\n47\n(\n3,6%\n)\n\n\n47\n(\n3,6%\n)\n\n\n47\n(\n3,6%\n)\n\n\n47\n(\n3,6%\n)\n\n\n46\n(\n3,5%\n)\n\n\n46\n(\n3,5%\n)\n\n\n46\n(\n3,5%\n)\n\n\n837\n(\n63,5%\n)\n\n\n\n0 (0,0%)\n\n\ng [numeric]\n\n\nMédia (dp) : 0,7 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,7 &lt; 1\n\n\nIQE (CV) : 0,3 (0,3)\n\n\n168 valores distintos\n\n0 (0,0%)\n\n\ngs [numeric]\n\n\nMédia (dp) : 0,6 (0,3)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,7 &lt; 1\n\n\nIQE (CV) : 0,6 (0,5)\n\n\n287 valores distintos\n\n0 (0,0%)\n\n\nmp [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,4 &lt; 1\n\n\nIQE (CV) : 0,4 (0,6)\n\n\n1193 valores distintos\n\n0 (0,0%)\n\n\nfg [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,3 (0,6)\n\n\n1029 valores distintos\n\n0 (0,0%)\n\n\nfga [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,3 (0,6)\n\n\n1156 valores distintos\n\n0 (0,0%)\n\n\nfg_percent [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,6)\n\n\n796 valores distintos\n\n0 (0,0%)\n\n\nx3p [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,3 (0,7)\n\n\n772 valores distintos\n\n0 (0,0%)\n\n\nx3pa [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,3 (0,6)\n\n\n1007 valores distintos\n\n0 (0,0%)\n\n\nx3p_percent [numeric]\n\n\nMédia (dp) : 0,5 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,6 &lt; 1\n\n\nIQE (CV) : 0,3 (0,4)\n\n\n628 valores distintos\n\n25 (1,9%)\n\n\nx2p [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,3 (0,6)\n\n\n1011 valores distintos\n\n0 (0,0%)\n\n\nx2pa [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,3 (0,6)\n\n\n1130 valores distintos\n\n0 (0,0%)\n\n\nx2p_percent [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,4 &lt; 1\n\n\nIQE (CV) : 0,2 (0,4)\n\n\n819 valores distintos\n\n0 (0,0%)\n\n\ne_fg_percent [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,4 &lt; 1\n\n\nIQE (CV) : 0,2 (0,4)\n\n\n741 valores distintos\n\n0 (0,0%)\n\n\nft [numeric]\n\n\nMédia (dp) : 0,2 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,2 &lt; 1\n\n\nIQE (CV) : 0,2 (0,8)\n\n\n911 valores distintos\n\n0 (0,0%)\n\n\nfta [numeric]\n\n\nMédia (dp) : 0,2 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,2 &lt; 1\n\n\nIQE (CV) : 0,2 (0,8)\n\n\n975 valores distintos\n\n0 (0,0%)\n\n\nft_percent [numeric]\n\n\nMédia (dp) : 0,7 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,7 &lt; 1\n\n\nIQE (CV) : 0,2 (0,3)\n\n\n915 valores distintos\n\n0 (0,0%)\n\n\norb [numeric]\n\n\nMédia (dp) : 0,2 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,1 &lt; 1\n\n\nIQE (CV) : 0,2 (0,9)\n\n\n677 valores distintos\n\n0 (0,0%)\n\n\ndrb [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,2 &lt; 1\n\n\nIQE (CV) : 0,2 (0,7)\n\n\n967 valores distintos\n\n0 (0,0%)\n\n\ntrb [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,2 &lt; 1\n\n\nIQE (CV) : 0,2 (0,7)\n\n\n1052 valores distintos\n\n0 (0,0%)\n\n\nast [numeric]\n\n\nMédia (dp) : 0,2 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,2 &lt; 1\n\n\nIQE (CV) : 0,2 (0,8)\n\n\n905 valores distintos\n\n0 (0,0%)\n\n\nstl [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,3 (0,6)\n\n\n427 valores distintos\n\n0 (0,0%)\n\n\nblk [numeric]\n\n\nMédia (dp) : 0,2 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,1 &lt; 1\n\n\nIQE (CV) : 0,2 (0,9)\n\n\n463 valores distintos\n\n0 (0,0%)\n\n\ntov [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,2 &lt; 1\n\n\nIQE (CV) : 0,2 (0,7)\n\n\n686 valores distintos\n\n0 (0,0%)\n\n\npf [numeric]\n\n\nMédia (dp) : 0,5 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,4 &lt; 1\n\n\nIQE (CV) : 0,3 (0,4)\n\n\n704 valores distintos\n\n0 (0,0%)\n\n\npts [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,3 (0,6)\n\n\n1201 valores distintos\n\n0 (0,0%)\n\n\ntw [numeric]\n\n\nMédia (dp) : 0,6 (0,3)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,6 &lt; 1\n\n\nIQE (CV) : 0,4 (0,5)\n\n\n110 valores distintos\n\n0 (0,0%)\n\n\nper [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,5)\n\n\n625 valores distintos\n\n0 (0,0%)\n\n\nts_percent [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,4 &lt; 1\n\n\nIQE (CV) : 0,2 (0,4)\n\n\n709 valores distintos\n\n0 (0,0%)\n\n\nx3p_ar [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,5 &lt; 1\n\n\nIQE (CV) : 0,3 (0,5)\n\n\n1063 valores distintos\n\n0 (0,0%)\n\n\nf_tr [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,6)\n\n\n977 valores distintos\n\n0 (0,0%)\n\n\norb_percent [numeric]\n\n\nMédia (dp) : 0,2 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,1 &lt; 1\n\n\nIQE (CV) : 0,2 (0,9)\n\n\n512 valores distintos\n\n0 (0,0%)\n\n\ndrb_percent [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,3 (0,7)\n\n\n786 valores distintos\n\n0 (0,0%)\n\n\ntrb_percent [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,2 &lt; 1\n\n\nIQE (CV) : 0,3 (0,7)\n\n\n675 valores distintos\n\n0 (0,0%)\n\n\nast_percent [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,2 &lt; 1\n\n\nIQE (CV) : 0,3 (0,7)\n\n\n878 valores distintos\n\n0 (0,0%)\n\n\nstl_percent [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,5)\n\n\n127 valores distintos\n\n0 (0,0%)\n\n\nblk_percent [numeric]\n\n\nMédia (dp) : 0,2 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,1 &lt; 1\n\n\nIQE (CV) : 0,2 (0,9)\n\n\n291 valores distintos\n\n0 (0,0%)\n\n\ntov_percent [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,5)\n\n\n579 valores distintos\n\n0 (0,0%)\n\n\nusg_percent [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,4 &lt; 1\n\n\nIQE (CV) : 0,3 (0,5)\n\n\n698 valores distintos\n\n0 (0,0%)\n\n\nows [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,5)\n\n\n432 valores distintos\n\n0 (0,0%)\n\n\ndws [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,5)\n\n\n197 valores distintos\n\n0 (0,0%)\n\n\nws [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,5)\n\n\n496 valores distintos\n\n0 (0,0%)\n\n\nws_48 [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,4 &lt; 1\n\n\nIQE (CV) : 0,2 (0,4)\n\n\n693 valores distintos\n\n0 (0,0%)\n\n\nobpm [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,5)\n\n\n477 valores distintos\n\n0 (0,0%)\n\n\ndbpm [numeric]\n\n\nMédia (dp) : 0,4 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,4 &lt; 1\n\n\nIQE (CV) : 0,2 (0,4)\n\n\n298 valores distintos\n\n0 (0,0%)\n\n\nbpm [numeric]\n\n\nMédia (dp) : 0,3 (0,2)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,3 &lt; 1\n\n\nIQE (CV) : 0,2 (0,5)\n\n\n527 valores distintos\n\n0 (0,0%)\n\n\nvorp [numeric]\n\n\nMédia (dp) : 0,3 (0,1)\n\n\nmín &lt; mediana &lt; máx:\n\n\n0 &lt; 0,2 &lt; 1\n\n\nIQE (CV) : 0,2 (0,6)\n\n\n326 valores distintos\n\n0 (0,0%)\n\n\nseason [numeric]\n\n\nMédia (dp) : 2019,9 (2,9)\n\n\nmín &lt; mediana &lt; máx:\n\n\n2014 &lt; 2020,5 &lt; 2023\n\n\nIQE (CV) : 3 (0)\n\n\n\n\n2014\n:\n214\n(\n16,2%\n)\n\n\n2019\n:\n217\n(\n16,5%\n)\n\n\n2020\n:\n228\n(\n17,3%\n)\n\n\n2021\n:\n218\n(\n16,5%\n)\n\n\n2022\n:\n225\n(\n17,1%\n)\n\n\n2023\n:\n216\n(\n16,4%\n)\n\n\n\n0 (0,0%)\n\n\nall_nba [numeric]\n\n\nMín : 0\n\n\nMédia : 0,1\n\n\nMáx : 1\n\n\n\n\n0\n:\n1228\n(\n93,2%\n)\n\n\n1\n:\n90\n(\n6,8%\n)\n\n\n\n0 (0,0%)\n\n\n\nGerado por summarytools 1.0.1 (R versão 4.3.1)2024-04-30",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Temporadas 2014 a 2023</span>"
    ]
  },
  {
    "objectID": "temporadas-2014-2023.html#colunas",
    "href": "temporadas-2014-2023.html#colunas",
    "title": "\n1  Temporadas 2014 a 2023\n",
    "section": "\n1.2 Colunas",
    "text": "1.2 Colunas\nDe https://www.basketball-reference.com/about/glossary.html, em ordem alfabética.\nVer também https://www.nba.com/stats/help/glossary.\n\n\n\n\n\n\nFaltaram\n\n\n\n\ndbpm: defensive bpm???\nf_tr: ???\nobpm: offensive bpm???\nx3p_ar: ???\n\n\n\n\n2P (x2p)\n\n2-Point Field Goals\n\n2P% (x2p_percent)\n\n2-Point Field Goal Percentage; the formula is \\(2P/2PA\\).\n\n2PA (x2pa)\n\n2-Point Field Goal Attempts\n\n3P (x3p)\n\n3-Point Field Goals (available since the 1979-80 season in the NBA)\n\n3P% (x3p_percent)\n\n3-Point Field Goal Percentage (available since the 1979-80 season in the NBA); the formula is \\(3P / 3PA\\).\n\n3PA (x3pa)\n\n3-Point Field Goal Attempts (available since the 1979-80 season in the NBA)\n\nAge\n\nAge; player age on February 1 of the given season.\n\nAST\n\nAssists\n\nAST%\n\nAssist Percentage (available since the 1964-65 season in the NBA); the formula is \\(100 * AST / (((MP / (Tm MP / 5)) * Tm FG) - FG)\\). Assist percentage is an estimate of the percentage of teammate field goals a player assisted while he was on the floor.\n\nBLK\n\nBlocks (available since the 1973-74 season in the NBA)\n\nBLK%\n\nBlock Percentage (available since the 1973-74 season in the NBA); the formula is \\(100 * (BLK * (Tm MP / 5)) / (MP * (Opp FGA - Opp 3PA))\\). Block percentage is an estimate of the percentage of opponent two-point field goal attempts blocked by the player while he was on the floor.\n\nBPM\n\nBox Plus/Minus (available since the 1973-74 season in the NBA); a box score estimate of the points per 100 possessions that a player contributed above a league-average player, translated to an average team. Please see the article About Box Plus/Minus (BPM) for more information.\n\nDRB\n\nDefensive Rebounds (available since the 1973-74 season in the NBA)\n\nDRB%\n\nDefensive Rebound Percentage (available since the 1970-71 season in the NBA); the formula is \\(100 * (DRB * (Tm MP / 5)) / (MP * (Tm DRB + Opp ORB))\\). Defensive rebound percentage is an estimate of the percentage of available defensive rebounds a player grabbed while he was on the floor.\n\nDRtg (???)\n\nDefensive Rating (available since the 1973-74 season in the NBA); for players and teams it is points allowed per 100 posessions. This rating was developed by Dean Oliver, author of Basketball on Paper. Please see the article Calculating Individual Offensive and Defensive Ratings for more information.\n\nDWS\n\nDefensive Win Shares; please see the article Calculating Win Shares for more information.\n\neFG%\n\nEffective Field Goal Percentage; the formula is \\((FG + 0.5 * 3P) / FGA\\). This statistic adjusts for the fact that a 3-point field goal is worth one more point than a 2-point field goal. For example, suppose Player A goes 4 for 10 with 2 threes, while Player B goes 5 for 10 with 0 threes. Each player would have 10 points from field goals, and thus would have the same effective field goal percentage (50%).\n\nFG\n\nField Goals (includes both 2-point field goals and 3-point field goals)\n\nFG%\n\nField Goal Percentage; the formula is \\(FG / FGA\\).\n\nFGA\n\nField Goal Attempts (includes both 2-point field goal attempts and 3-point field goal attempts)\n\nFT\n\nFree Throws\n\nFT%\n\nFree Throw Percentage; the formula is \\(FT / FTA\\).\n\nFTA\n\nFree Throw Attempts\n\nG\n\nGames\n\nGS\n\nGames Started (available since the 1982 season)\n\nMP\n\nMinutes Played (available since the 1951-52 season)\n\nORtg (???)\n\nOffensive Rating (available since the 1977-78 season in the NBA); for players it is points produced per 100 posessions, while for teams it is points scored per 100 possessions. This rating was developed by Dean Oliver, author of Basketball on Paper. Please see the article Calculating Individual Offensive and Defensive Ratings for more information.\n\nORB\n\nOffensive Rebounds (available since the 1973-74 season in the NBA)\n\nORB%\n\nOffensive Rebound Percentage (available since the 1970-71 season in the NBA); the formula is \\(100 * (ORB * (Tm MP / 5)) / (MP * (Tm ORB + Opp DRB))\\). Offensive rebound percentage is an estimate of the percentage of available offensive rebounds a player grabbed while he was on the floor.\n\nOWS\n\nOffensive Win Shares; please see the article Calculating Win Shares for more information.\n\nPER\n\nPlayer Efficiency Rating (available since the 1951-52 season); PER is a rating developed by ESPN.com columnist John Hollinger. In John’s words, “The PER sums up all a player’s positive accomplishments, subtracts the negative accomplishments, and returns a per-minute rating of a player’s performance.” Please see the article Calculating PER for more information.\n\nPF\n\nPersonal Fouls\n\nPTS\n\nPoints\n\nSTL\n\nSteals (available since the 1973-74 season in the NBA)\n\nSTL%\n\nSteal Percentage (available since the 1973-74 season in the NBA); the formula is \\(100 * (STL * (Tm MP / 5)) / (MP * Opp Poss)\\). Steal Percentage is an estimate of the percentage of opponent possessions that end with a steal by the player while he was on the floor.\n\nTm\n\nTeam\n\nTOV\n\nTurnovers (available since the 1977-78 season in the NBA)\n\nTOV%\n\nTurnover Percentage (available since the 1977-78 season in the NBA); the formula is \\(100 * TOV / (FGA + 0.44 * FTA + TOV)\\). Turnover percentage is an estimate of turnovers per 100 plays.\n\nTRB\n\nTotal Rebounds (available since the 1950-51 season)\n\nTRB%\n\nTotal Rebound Percentage (available since the 1970-71 season in the NBA); the formula is \\(100 * (TRB * (Tm MP / 5)) / (MP * (Tm TRB + Opp TRB))\\). Total rebound percentage is an estimate of the percentage of available rebounds a player grabbed while he was on the floor.\n\nTS%\n\nTrue Shooting Percentage; the formula is \\(PTS / (2 * TSA)\\). True shooting percentage is a measure of shooting efficiency that takes into account field goals, 3-point field goals, and free throws.\n\nUsg%\n\nUsage Percentage (available since the 1977-78 season in the NBA); the formula is \\(100 * ((FGA + 0.44 * FTA + TOV) * (Tm MP / 5)) / (MP * (Tm FGA + 0.44 * Tm FTA + Tm TOV))\\). Usage percentage is an estimate of the percentage of team plays used by a player while he was on the floor.\n\nVORP\n\nValue Over Replacement Player (available since the 1973-74 season in the NBA); a box score estimate of the points per 100 TEAM possessions that a player contributed above a replacement-level (-2.0) player, translated to an average team and prorated to an 82-game season. Multiply by 2.70 to convert to wins over replacement. Please see the article About Box Plus/Minus (BPM) for more information.\n\nWS\n\nWin Shares; an estimate of the number of wins contributed by a player. Please see the article Calculating Win Shares for more information.\n\nWS/48 (ws_48)\n\nWin Shares Per 48 Minutes (available since the 1951-52 season in the NBA); an estimate of the number of wins contributed by the player per 48 minutes (league average is approximately 0.100). Please see the article Calculating Win Shares for more information.\n\n\n\n\n\n\n\n\nDe onde vem defensive rating?\n\n\n\ndrtg é usada no DWARFF-BB, mas não está no arquivo csv.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Temporadas 2014 a 2023</span>"
    ]
  },
  {
    "objectID": "temporadas-2014-2023.html#gravar-csv",
    "href": "temporadas-2014-2023.html#gravar-csv",
    "title": "\n1  Temporadas 2014 a 2023\n",
    "section": "\n1.3 Gravar csv",
    "text": "1.3 Gravar csv\n\ndf %&gt;% \n  write_csv('dados/temporadas-2014-2023.csv')\n\nWarning in vroom::vroom_write(x, file, delim = delim, col_names =\ncol_names, : NAs introduced by coercion",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Temporadas 2014 a 2023</span>"
    ]
  },
  {
    "objectID": "temporadas-2014-2023-logistic.html",
    "href": "temporadas-2014-2023-logistic.html",
    "title": "\n2  Regressão logística (2014 a 2023)\n",
    "section": "",
    "text": "2.1 Preditores\nVamos usar apenas",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Regressão logística (2014 a 2023)</span>"
    ]
  },
  {
    "objectID": "temporadas-2014-2023-logistic.html#preditores",
    "href": "temporadas-2014-2023-logistic.html#preditores",
    "title": "\n2  Regressão logística (2014 a 2023)\n",
    "section": "",
    "text": "g: games\nmp: minutes played\nvorp\nfg: field goals\nbpm\ntw\nast_percent\ndrb\nft\nblk",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Regressão logística (2014 a 2023)</span>"
    ]
  },
  {
    "objectID": "temporadas-2014-2023-logistic.html#ler-csv",
    "href": "temporadas-2014-2023-logistic.html#ler-csv",
    "title": "\n2  Regressão logística (2014 a 2023)\n",
    "section": "\n2.2 Ler csv",
    "text": "2.2 Ler csv\n\ndf &lt;- read_csv('dados/temporadas-2014-2023.csv')\n\nRows: 1318 Columns: 52\n── Column specification ────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): player, pos, tm\ndbl (49): age, g, gs, mp, fg, fga, fg_percent, x3p, x3pa, x3p_percen...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Regressão logística (2014 a 2023)</span>"
    ]
  },
  {
    "objectID": "temporadas-2014-2023-logistic.html#correlações-entre-preditores",
    "href": "temporadas-2014-2023-logistic.html#correlações-entre-preditores",
    "title": "\n2  Regressão logística (2014 a 2023)\n",
    "section": "\n2.3 Correlações entre preditores",
    "text": "2.3 Correlações entre preditores\n\nplot_cor &lt;- function(df, v1, v2) {\n  \n  x = df[[v1]]\n  y = df[[v2]]\n  valor_cor &lt;- cor(x, y) %&gt;% round(2)\n  \n  df %&gt;% ggplot(aes(x, y)) +\n    geom_point(size = 0.3, alpha = 0.5) +\n    labs(\n      title = paste0('cor(', v1, ', ', v2, ') = ', valor_cor),\n      x = v1,\n      y = v2\n    )\n  \n}\n\n\nv &lt;- c(\n  'g',\n  'mp',\n  'vorp',\n  'fg',\n  'bpm',\n  'tw',\n  'ast_percent',\n  'drb',\n  'ft',\n  'blk'\n)\n\npares &lt;- expand_grid(x = v, y = v) %&gt;% \n  filter(x &lt; y) %&gt;% \n  arrange(x, y)\n\nv1 &lt;- pares %&gt;% pull(x)\nv2 &lt;- pares %&gt;% pull(y)\n\nplots &lt;- map2(\n  v1, v2, ~ plot_cor(df, .x, .y)\n)\n\nplots %&gt;% \n  wrap_plots(\n    ncol = 2,\n    byrow = TRUE\n  )\n\n\n\n\n\n\n\n\ndf_cors &lt;- \n  map2(\n    v1, \n    v2, \n    ~ tibble(\n      v1 = .x, \n      v2 = .y, \n      valor = round(cor(df[[.x]], df[[.y]]), 2)\n    )\n  ) %&gt;% \n  bind_rows()\n\nColunas com correlação maior que \\(0{,}5\\):\n\ndf_cors %&gt;% \n  filter(abs(valor) &gt; 0.5)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Regressão logística (2014 a 2023)</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html",
    "href": "gerar-listas-e-rankings.html",
    "title": "\n3  Listas e rankings\n",
    "section": "",
    "text": "3.1 Problema\nVamos trabalhar com listas e rankings sujeitos às seguintes condições:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Listas e *rankings*</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#problema",
    "href": "gerar-listas-e-rankings.html#problema",
    "title": "\n3  Listas e rankings\n",
    "section": "",
    "text": "A lista tem \\(k\\) elementos, \\(k &gt; 0\\), não ordenados.\nO ranking tem \\(p\\) elementos, \\(p \\geq k\\), ordenados, sem empates.\nTodos os elementos da lista também pertencem ao ranking.\nO último elemento do ranking sempre pertence à lista.\nAs identidades dos elementos do ranking não importam — i.e., eles são indistinguíveis, a não ser por pertencerem ou não à lista (e pela ordem que ocupam no ranking, claro).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Listas e *rankings*</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#criando-rankings",
    "href": "gerar-listas-e-rankings.html#criando-rankings",
    "title": "\n3  Listas e rankings\n",
    "section": "\n3.2 Criando rankings\n",
    "text": "3.2 Criando rankings\n\nRepresentação\nConsidere naturais \\(k &gt; 0\\) e \\(p \\geq k\\).\nPodemos representar um ranking através de um string contendo \\(k\\) caracteres “x” e \\(p - k\\) caracteres “-”.\n“x” representa uma posição ocupada por um elemento da lista.\n“-” representa uma posição ocupada por um elemento que não está na lista.\nVocê pode usar a função rk() para criar um ranking, passando um string da forma acima:\n\nrk('xx--x')\n\nranking: [xx--x] (p = 5, k = 3)\n\n\nR vai mostrar o ranking com os valores de \\(k\\) e \\(p\\). Se quiser ver o ranking com caracteres Unicode, use a função print com o argumento unicode = TRUE:\n\nprint(rk('xx--x'), unicode = TRUE)\n\nranking: [✔✔••✔] (p = 5, k = 3)\n\n\nQuantidade de rankings\n\nDados \\(k &gt; 0\\) e \\(p \\geq k\\) fixos, quantos rankings existem?\nPara montar um ranking:\n\nSabemos que a última posição é ocupada por alguém da lista.\nSó resta escolher as posições dos \\(k - 1\\) elementos restantes da lista dentre as \\(p - 1\\) posições restantes no ranking, o que dá \\(\\binom{p - 1}{k - 1}\\) escolhas.\n\nAssim, a quantidade total de rankings para \\(k\\) e \\(p\\) dados é\n\\[\n\\binom{p - 1}{k - 1}\n\\]\nPor exemplo, para \\(k = 3, p = 5\\), os \\(\\binom{4}{2} = 6\\) rankings possíveis são\n\nxx--x\nx-x-x\nx--xx\n-xx-x\n-x-xx\n--xxx\n\nA tabela a seguir (na verdade, um pedaço do triângulo de Pascal) mostra as quantidades de rankings possíveis para alguns valores de \\(k\\) e \\(p\\):\n\ndf &lt;- expand_grid(\n  k = 1:10,\n  p = 1:30\n) %&gt;% \n  filter(p &gt;= k) %&gt;% \n  mutate(\n    n_rankings = choose(p - 1, k - 1)\n  )\n\n\ndf %&gt;% \n  pivot_wider(\n    names_from = k,\n    names_sort = TRUE,\n    values_from = n_rankings,\n    values_fill = NA\n  ) %&gt;% \n  gt(rowname_col = 'p') %&gt;%\n    tab_stubhead(label = md('$p$')) %&gt;% \n    tab_spanner(label = md('$k$'), columns = everything()) %&gt;% \n    fmt_number(sep_mark = '.', dec_mark = ',', decimals = 0) %&gt;% \n    sub_missing(missing_text = '') %&gt;% \n    tab_style(\n      cell_text(align = 'left'),\n      cells_column_spanners()\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(p\\)\n\\(k\\)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n2\n1\n1\n\n\n\n\n\n\n\n\n\n\n3\n1\n2\n1\n\n\n\n\n\n\n\n\n\n4\n1\n3\n3\n1\n\n\n\n\n\n\n\n\n5\n1\n4\n6\n4\n1\n\n\n\n\n\n\n\n6\n1\n5\n10\n10\n5\n1\n\n\n\n\n\n\n7\n1\n6\n15\n20\n15\n6\n1\n\n\n\n\n\n8\n1\n7\n21\n35\n35\n21\n7\n1\n\n\n\n\n9\n1\n8\n28\n56\n70\n56\n28\n8\n1\n\n\n\n10\n1\n9\n36\n84\n126\n126\n84\n36\n9\n1\n\n\n11\n1\n10\n45\n120\n210\n252\n210\n120\n45\n10\n\n\n12\n1\n11\n55\n165\n330\n462\n462\n330\n165\n55\n\n\n13\n1\n12\n66\n220\n495\n792\n924\n792\n495\n220\n\n\n14\n1\n13\n78\n286\n715\n1.287\n1.716\n1.716\n1.287\n715\n\n\n15\n1\n14\n91\n364\n1.001\n2.002\n3.003\n3.432\n3.003\n2.002\n\n\n16\n1\n15\n105\n455\n1.365\n3.003\n5.005\n6.435\n6.435\n5.005\n\n\n17\n1\n16\n120\n560\n1.820\n4.368\n8.008\n11.440\n12.870\n11.440\n\n\n18\n1\n17\n136\n680\n2.380\n6.188\n12.376\n19.448\n24.310\n24.310\n\n\n19\n1\n18\n153\n816\n3.060\n8.568\n18.564\n31.824\n43.758\n48.620\n\n\n20\n1\n19\n171\n969\n3.876\n11.628\n27.132\n50.388\n75.582\n92.378\n\n\n21\n1\n20\n190\n1.140\n4.845\n15.504\n38.760\n77.520\n125.970\n167.960\n\n\n22\n1\n21\n210\n1.330\n5.985\n20.349\n54.264\n116.280\n203.490\n293.930\n\n\n23\n1\n22\n231\n1.540\n7.315\n26.334\n74.613\n170.544\n319.770\n497.420\n\n\n24\n1\n23\n253\n1.771\n8.855\n33.649\n100.947\n245.157\n490.314\n817.190\n\n\n25\n1\n24\n276\n2.024\n10.626\n42.504\n134.596\n346.104\n735.471\n1.307.504\n\n\n26\n1\n25\n300\n2.300\n12.650\n53.130\n177.100\n480.700\n1.081.575\n2.042.975\n\n\n27\n1\n26\n325\n2.600\n14.950\n65.780\n230.230\n657.800\n1.562.275\n3.124.550\n\n\n28\n1\n27\n351\n2.925\n17.550\n80.730\n296.010\n888.030\n2.220.075\n4.686.825\n\n\n29\n1\n28\n378\n3.276\n20.475\n98.280\n376.740\n1.184.040\n3.108.105\n6.906.900\n\n\n30\n1\n29\n406\n3.654\n23.751\n118.755\n475.020\n1.560.780\n4.292.145\n10.015.005\n\n\n\n\n\n\nCriando um ranking a partir de um vetor\nEm vez de especificar as \\(p\\) posições do ranking, pode ser mais compacto especificar as \\(k\\) posições do ranking que são ocupadas por elementos da lista.\nPara isso, a função rk() também aceita um vetor numérico com \\(k\\) elementos.\n\nrk(c(1, 3, 5, 7))\n\nranking: [x-x-x-x] (p = 7, k = 4)\n\n\nObserve que as posições não precisam ser passadas em ordem:\n\nrk(c(3, 7, 5, 1))\n\nranking: [x-x-x-x] (p = 7, k = 4)\n\n\nA função detecta vetores que não podem representar rankings:\n\nrk(c(3, 7, 3, 1))\n\nError in validate_rk(x): \nValores precisam ser inteiros positivos, sem repetições.\n\n\n\nrk(c(5, 7, 3, 1.5))\n\nError in validate_rk(x): \nValores precisam ser inteiros positivos, sem repetições.\n\n\n\nrk(c(5, -7, 3, 1))\n\nError in validate_rk(x): \nValores precisam ser inteiros positivos, sem repetições.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Listas e *rankings*</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#outras-funções",
    "href": "gerar-listas-e-rankings.html#outras-funções",
    "title": "\n3  Listas e rankings\n",
    "section": "\n3.3 Outras funções",
    "text": "3.3 Outras funções\nMostrando um ranking graficamente\nA função plot recebe um ranking e gera um gráfico de pontos, com um ponto para cada elemento.\nNo eixo \\(x\\), a posição do elemento na lista.\nNo eixo \\(y\\), a posição do elemento no ranking.\n\nr &lt;- rk('x-x-x-xx')\nplot(r)\n\n\n\n\n\n\n\nO argumento reta, opcional, especifica se deve ser incluída uma reta de regressão linear via mínimos quadrados. O default é TRUE.\n\nplot(r, reta = FALSE)\n\n\n\n\n\n\n\nA função plot pode receber um argumento fun, opcional, especificando uma função para calcular o score deste ranking (i.e., alguma forma de correlação entre o ranking e a lista). O score vai ser mostrado no título do gráfico.\nA função passada em fun deve receber um objeto rk e retornar o score numérico.\n\nplot(\n  r, \n  fun = \\(r) { \n    df &lt;- as_tibble(r)\n    cor(df$pos_lista, df$pos_ranking) %&gt;% round(2) \n  }\n)\n\n\n\n\n\n\n\nCriando uma tibble com todos os rankings\n\nDados valores de \\(p\\) e \\(k\\) (nesta ordem), a função criar_df_rankings() retorna uma tibble com todos os \\(\\binom{p - 1}{k - 1}\\) rankings possíveis, como objetos (S3) e como strings.\nTodos os rankings com \\(p = 8\\) e \\(k = 5\\):\n\ncriar_df_rankings(8, 5)\n\n\n  \n\n\n\nSe for passado apenas o valor de \\(p\\), a função retorna uma tibble com todos os rankings possíveis de comprimento \\(p\\) (com \\(k\\) variando de \\(1\\) até \\(p\\)). Exercício: quantos são?\nTodos os rankings com \\(p = 5\\):\n\ncriar_df_rankings(5)\n\n\n  \n\n\n\nSe você quiser a representação em string usando unicode, basta passar o argumento unicode = TRUE:\n\ncriar_df_rankings(5, unicode = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Listas e *rankings*</span>"
    ]
  },
  {
    "objectID": "usando-posicoes.html",
    "href": "usando-posicoes.html",
    "title": "\n4  O ranking concorda com a lista? Posições\n",
    "section": "",
    "text": "4.1 Usando \\(p\\) como medida de concordância\nImagine que a lista de \\(k\\) elementos foi definida por uma autoridade, usando critérios que não conhecemos.\nEm uma tentativa de descobrir esses critérios, construímos um modelo para avaliar todos os elementos da população (que incluem os \\(k\\) elementos da lista).\nNosso modelo produz um ranking de todos os elementos. Para facilitar, vamos supor que não há empates no ranking.\nUma pergunta natural sobre a qualidade do ranking produzido é\nA resposta é \\(p\\), a posição, no ranking, do elemento da lista com pior classificação.\nAliás, é por isso que convencionamos, no capítulo anterior, que nossos rankings sempre terminam com um elemento da lista.\nUm exemplo:\nSegundo a medida proposta aqui, \\(r_2\\) é melhor que \\(r_1\\).\nOu seja, quanto menor o valor de \\(p\\), melhor o ranking.\nEmbora comparar rankings através de seus valores de \\(p\\) seja simples, podemos examinar medidas alternativas, que sejam mais finas que esta.\nPor exemplo, é discutível se os dois rankings xx---x e ---xxx devem ser considerados igualmente bons; no entanto, ambos têm \\(p = 6\\).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>O *ranking* concorda com a lista? Posições</span>"
    ]
  },
  {
    "objectID": "usando-posicoes.html#usando-p",
    "href": "usando-posicoes.html#usando-p",
    "title": "\n4  O ranking concorda com a lista? Posições\n",
    "section": "",
    "text": "Quantas posições do ranking são necessárias para incluir todos os \\(k\\) elementos da lista?\n\n\n\n\n\nA lista contém \\(k = 5\\) elementos.\nO ranking \\(r_1\\) é xx-x-xx, com \\(p = 7\\).\nO ranking \\(r_2\\) é -xxxxx, com \\(p = 6\\).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>O *ranking* concorda com a lista? Posições</span>"
    ]
  },
  {
    "objectID": "usando-posicoes.html#usando-p-e-as-posições-dos-elementos-da-lista",
    "href": "usando-posicoes.html#usando-p-e-as-posições-dos-elementos-da-lista",
    "title": "\n4  O ranking concorda com a lista? Posições\n",
    "section": "\n4.2 Usando \\(p\\) e as posições dos elementos da lista",
    "text": "4.2 Usando \\(p\\) e as posições dos elementos da lista\nContando posições -\n\nDado um ranking \\(r\\) com \\(k\\) e \\(p\\), queremos definir uma função \\(s(r)\\) — \\(s\\) de score — com as seguintes características:\n\n\nSe \\(r\\) não contiver “-”, então \\(s(r) = 1\\). Neste caso, \\(r\\) é um ranking perfeito, que coincide com a lista (por exempĺo, xxxxx). Em casos assim, \\(k = p\\). Vamos definir \\(s\\) como sendo da forma\n\\[\ns(r) = \\frac k p + \\cdots\n\\]\nonde as reticências representam uma parcela que ainda vamos definir. Se \\(r\\) for um ranking perfeito, a parcela \\(k/p\\) será \\(1\\), e vamos definir a parcela restante para que seja igual a zero.\n\n\nA parcela restante deve ter valor maior quanto melhor for o ranking. Quanto mais próximos do fim do ranking estiverem os caracteres “-”, melhor ele será. Uma quantidade natural seria\n\\[\n\\frac{\\operatorname{soma\\_}}{\\sum_{i = 1, p}i}\n\\quad=\\quad\n\\frac{\\operatorname{soma\\_}}{p(p + 1) / 2}\n\\quad=\\quad\n\\frac{2\\operatorname{soma\\_}}{p(p + 1)}\n\\]\nonde \\(\\operatorname{soma\\_}\\) é a soma das posições ocupadas por “_” em \\(r\\).\nComo queríamos, quando \\(r\\) for um ranking perfeito, \\(\\operatorname{soma\\_} = 0\\), e então \\(s(r) = 1\\).\n\n\nMas também queremos que somente rankings perfeitos tenham \\(s(r) = 1\\). Para isso, considere que um ranking mais próximo do perfeito é da forma\nx...x-x\nOu seja, \\(k = p - 1\\) e \\(\\operatorname{soma\\_} = p - 1\\).\nVamos multiplicar a segunda parcela por \\(\\alpha\\) de forma que \\(s(r) &lt; 1\\) para este ranking quase perfeito:\n\\[\ns(r) = \\frac{p-1}{p} + \\frac{2(p-1)}{p(p+1)} \\cdot \\alpha\n\\]\nEntão\n\\[\n\\begin{aligned}\n  s(r) &lt; 1\n  &\\iff \\frac{2(p-1)}{p(p+1)} \\cdot \\alpha &lt; \\frac1p \\\\\n  &\\iff 2 \\alpha (p - 1) &lt; p + 1 \\\\\n  &\\iff \\alpha &lt; \\frac12 \\cdot \\frac{p + 1}{p - 1} \\\\\n  &\\iff \\alpha = \\frac1m \\cdot \\frac{p + 1}{p - 1} & (m &gt; 2)\n\\end{aligned}\n\\]\no que dá\n\\[\n\\begin{aligned}\ns(r)\n&= \\frac{k}{p} + \\frac{2\\operatorname{soma\\_}}{p(p+1)} \\cdot \\alpha \\\\\n&= \\frac{k}{p} + \\frac{2\\operatorname{soma\\_}}{p(p+1)} \\cdot\n  \\frac1m \\cdot \\frac{p + 1}{p - 1} & (m &gt; 2) \\\\\n&= \\frac{k}{p} + \\frac{2\\operatorname{soma\\_}}{p(p-1)} \\cdot\n  \\frac1m & (m &gt; 2) \\\\\n&= \\frac{k}{p} + \\frac{\\operatorname{soma\\_}}{p(p-1)} \\cdot\n  \\frac2m & (m &gt; 2)\n\\end{aligned}\n\\]\nDependendo do valor de \\(m &gt; 2\\) escolhido, teremos medidas diferentes.\nA função que implementamos usa o default de \\(m = 10\\), mas valores diferentes podem ser passados.\n\n\n\ns1 &lt;- function(um_rk, m) {\n  \n  p &lt;- um_rk$p\n  k &lt;- um_rk$k\n  soma_ &lt;- sum(um_rk$no)\n\n  (k / p) + ((2 * soma_) / (m * p * (p - 1)))\n\n}\n\ns &lt;- function(rk, m = 10) {\n\n  if (is.rk(rk)) {\n    s1(rk, m)\n  } else {\n    rk %&gt;% map_dbl(s1, m)\n  }\n\n}\n\n\nr &lt;- rk('xxx-x')\ns(r)\n\n[1] 0,84\n\n\nPara \\(p = 8\\), alguns exemplos:\n\ns(\n  list(\n    rk('xxxxxxxx'),\n    rk('xxxxxx-x'),\n    rk('-xxxxxxx')\n  )\n)\n\n[1] 1,0000000 0,9000000 0,8785714\n\n\nEis todos os rankings de comprimento \\(8\\), com suas pontuações:\n\ndf &lt;- criar_df_rankings(8) %&gt;% \n  mutate(\n    s = s(ranking)\n  ) %&gt;% \n  arrange(desc(s))\n\ndf %&gt;% \n  select(ranking_str, s) %&gt;% \n  gt()\n\n\n\n\n\nranking_str\ns\n\n\n\nxxxxxxxx\n1,0000000\n\n\nxxxxxx-x\n0,9000000\n\n\nxxxxx-xx\n0,8964286\n\n\nxxxx-xxx\n0,8928571\n\n\nxxx-xxxx\n0,8892857\n\n\nxx-xxxxx\n0,8857143\n\n\nx-xxxxxx\n0,8821429\n\n\n-xxxxxxx\n0,8785714\n\n\nxxxxx--x\n0,7964286\n\n\nxxxx-x-x\n0,7928571\n\n\nxxxx--xx\n0,7892857\n\n\nxxx-xx-x\n0,7892857\n\n\nxxx-x-xx\n0,7857143\n\n\nxx-xxx-x\n0,7857143\n\n\nxxx--xxx\n0,7821429\n\n\nxx-xx-xx\n0,7821429\n\n\nx-xxxx-x\n0,7821429\n\n\nxx-x-xxx\n0,7785714\n\n\nx-xxx-xx\n0,7785714\n\n\n-xxxxx-x\n0,7785714\n\n\nxx--xxxx\n0,7750000\n\n\nx-xx-xxx\n0,7750000\n\n\n-xxxx-xx\n0,7750000\n\n\nx-x-xxxx\n0,7714286\n\n\n-xxx-xxx\n0,7714286\n\n\nx--xxxxx\n0,7678571\n\n\n-xx-xxxx\n0,7678571\n\n\n-x-xxxxx\n0,7642857\n\n\n--xxxxxx\n0,7607143\n\n\nxxxx---x\n0,6892857\n\n\nxxx-x--x\n0,6857143\n\n\nxxx--x-x\n0,6821429\n\n\nxx-xx--x\n0,6821429\n\n\nxxx---xx\n0,6785714\n\n\nxx-x-x-x\n0,6785714\n\n\nx-xxx--x\n0,6785714\n\n\nxx-x--xx\n0,6750000\n\n\nxx--xx-x\n0,6750000\n\n\nx-xx-x-x\n0,6750000\n\n\n-xxxx--x\n0,6750000\n\n\nxx--x-xx\n0,6714286\n\n\nx-xx--xx\n0,6714286\n\n\nx-x-xx-x\n0,6714286\n\n\n-xxx-x-x\n0,6714286\n\n\nxx---xxx\n0,6678571\n\n\nx-x-x-xx\n0,6678571\n\n\nx--xxx-x\n0,6678571\n\n\n-xxx--xx\n0,6678571\n\n\n-xx-xx-x\n0,6678571\n\n\nx-x--xxx\n0,6642857\n\n\nx--xx-xx\n0,6642857\n\n\n-xx-x-xx\n0,6642857\n\n\n-x-xxx-x\n0,6642857\n\n\nx--x-xxx\n0,6607143\n\n\n-xx--xxx\n0,6607143\n\n\n-x-xx-xx\n0,6607143\n\n\n--xxxx-x\n0,6607143\n\n\nx---xxxx\n0,6571429\n\n\n-x-x-xxx\n0,6571429\n\n\n--xxx-xx\n0,6571429\n\n\n-x--xxxx\n0,6535714\n\n\n--xx-xxx\n0,6535714\n\n\n--x-xxxx\n0,6500000\n\n\n---xxxxx\n0,6464286\n\n\nxxx----x\n0,5785714\n\n\nxx-x---x\n0,5750000\n\n\nxx--x--x\n0,5714286\n\n\nx-xx---x\n0,5714286\n\n\nxx---x-x\n0,5678571\n\n\nx-x-x--x\n0,5678571\n\n\n-xxx---x\n0,5678571\n\n\nxx----xx\n0,5642857\n\n\nx-x--x-x\n0,5642857\n\n\nx--xx--x\n0,5642857\n\n\n-xx-x--x\n0,5642857\n\n\nx-x---xx\n0,5607143\n\n\nx--x-x-x\n0,5607143\n\n\n-xx--x-x\n0,5607143\n\n\n-x-xx--x\n0,5607143\n\n\nx--x--xx\n0,5571429\n\n\nx---xx-x\n0,5571429\n\n\n-xx---xx\n0,5571429\n\n\n-x-x-x-x\n0,5571429\n\n\n--xxx--x\n0,5571429\n\n\nx---x-xx\n0,5535714\n\n\n-x-x--xx\n0,5535714\n\n\n-x--xx-x\n0,5535714\n\n\n--xx-x-x\n0,5535714\n\n\nx----xxx\n0,5500000\n\n\n-x--x-xx\n0,5500000\n\n\n--xx--xx\n0,5500000\n\n\n--x-xx-x\n0,5500000\n\n\n-x---xxx\n0,5464286\n\n\n--x-x-xx\n0,5464286\n\n\n---xxx-x\n0,5464286\n\n\n--x--xxx\n0,5428571\n\n\n---xx-xx\n0,5428571\n\n\n---x-xxx\n0,5392857\n\n\n----xxxx\n0,5357143\n\n\nxx-----x\n0,4642857\n\n\nx-x----x\n0,4607143\n\n\nx--x---x\n0,4571429\n\n\n-xx----x\n0,4571429\n\n\nx---x--x\n0,4535714\n\n\n-x-x---x\n0,4535714\n\n\nx----x-x\n0,4500000\n\n\n-x--x--x\n0,4500000\n\n\n--xx---x\n0,4500000\n\n\nx-----xx\n0,4464286\n\n\n-x---x-x\n0,4464286\n\n\n--x-x--x\n0,4464286\n\n\n-x----xx\n0,4428571\n\n\n--x--x-x\n0,4428571\n\n\n---xx--x\n0,4428571\n\n\n--x---xx\n0,4392857\n\n\n---x-x-x\n0,4392857\n\n\n---x--xx\n0,4357143\n\n\n----xx-x\n0,4357143\n\n\n----x-xx\n0,4321429\n\n\n-----xxx\n0,4285714\n\n\nx------x\n0,3464286\n\n\n-x-----x\n0,3428571\n\n\n--x----x\n0,3392857\n\n\n---x---x\n0,3357143\n\n\n----x--x\n0,3321429\n\n\n-----x-x\n0,3285714\n\n\n------xx\n0,3250000\n\n\n-------x\n0,2250000\n\n\n\n\n\n\nPerceba que pode haver empates: xxxx--xx e xxx-xx-x têm o mesmo valor de \\(s\\). É razoável achar que estes dois rankings têm a mesma qualidade.\nComparando rankings com valores diferentes de \\(p\\)\n\nComo a lista é dada e fixa, só faz sentido, na prática, comparar rankings com o mesmo valor de \\(k\\).\n\ndf &lt;- criar_df_rankings(k = 2, maxp = 10) %&gt;% \n  mutate(\n    s = s(ranking),\n    p = ranking %&gt;% map_int(~ .$p)\n  ) %&gt;% \n  arrange(desc(s))\n\nVamos examinar, para uma lista com \\(k = 2\\), os rankings possíveis com \\(p\\) variando de \\(2\\) a \\(10\\).\nSão \\(45\\) rankings:\n\ndf %&gt;%\n  select(ranking_str, p, s) %&gt;% \n  gt()\n\n\n\n\n\nranking_str\np\ns\n\n\n\nxx\n2\n1,0000000\n\n\nx-x\n3\n0,7333333\n\n\n-xx\n3\n0,7000000\n\n\nx--x\n4\n0,5833333\n\n\n-x-x\n4\n0,5666667\n\n\n--xx\n4\n0,5500000\n\n\nx---x\n5\n0,4900000\n\n\n-x--x\n5\n0,4800000\n\n\n--x-x\n5\n0,4700000\n\n\n---xx\n5\n0,4600000\n\n\nx----x\n6\n0,4266667\n\n\n-x---x\n6\n0,4200000\n\n\n--x--x\n6\n0,4133333\n\n\n---x-x\n6\n0,4066667\n\n\n----xx\n6\n0,4000000\n\n\nx-----x\n7\n0,3809524\n\n\n-x----x\n7\n0,3761905\n\n\n--x---x\n7\n0,3714286\n\n\n---x--x\n7\n0,3666667\n\n\n----x-x\n7\n0,3619048\n\n\n-----xx\n7\n0,3571429\n\n\nx------x\n8\n0,3464286\n\n\n-x-----x\n8\n0,3428571\n\n\n--x----x\n8\n0,3392857\n\n\n---x---x\n8\n0,3357143\n\n\n----x--x\n8\n0,3321429\n\n\n-----x-x\n8\n0,3285714\n\n\n------xx\n8\n0,3250000\n\n\nx-------x\n9\n0,3194444\n\n\n-x------x\n9\n0,3166667\n\n\n--x-----x\n9\n0,3138889\n\n\n---x----x\n9\n0,3111111\n\n\n----x---x\n9\n0,3083333\n\n\n-----x--x\n9\n0,3055556\n\n\n------x-x\n9\n0,3027778\n\n\n-------xx\n9\n0,3000000\n\n\nx--------x\n10\n0,2977778\n\n\n-x-------x\n10\n0,2955556\n\n\n--x------x\n10\n0,2933333\n\n\n---x-----x\n10\n0,2911111\n\n\n----x----x\n10\n0,2888889\n\n\n-----x---x\n10\n0,2866667\n\n\n------x--x\n10\n0,2844444\n\n\n-------x-x\n10\n0,2822222\n\n\n--------xx\n10\n0,2800000\n\n\n\n\n\n\nOs gráficos abaixo mostram os scores atribuídos para todos os rankings com \\(k = 2\\) e \\(p\\) variando de \\(2\\) a \\(10\\), separados por valores de \\(p\\):\n\ndf %&gt;%\n  filter(p &lt;= 5) %&gt;% \n  ggplot() +\n    geom_boxplot(\n      aes(x = p, y = s, group = p, fill = factor(p)),\n      show.legend = FALSE\n    ) +\n    scale_x_continuous(breaks = 2:10) +\n    labs(\n      title = 'Scores de todos os rankings',\n      subtitle = 'com k = 2,  p = 2 a 5',\n      y = 'score'\n    )\n\n\n\n\n\n\n\n\ndf %&gt;%\n  filter(p &gt; 5) %&gt;% \n  ggplot() +\n    geom_boxplot(\n      aes(x = p, y = s, group = p, fill = factor(p)),\n      show.legend = FALSE\n    ) +\n    scale_x_continuous(breaks = 2:10) +\n    labs(\n      title = 'Scores de todos os rankings',\n      subtitle = 'com k = 2,  p = 6 a 10',\n      y = 'score'\n    )\n\n\n\n\n\n\n\n\ndf %&gt;% \n  group_by(p) %&gt;% \n  arrange(s) %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  ungroup() %&gt;% \n  ggplot() +\n    geom_point(\n      aes(id, s, color = factor(p)),\n      size = 2\n    ) +\n    geom_line(\n      aes(id, s, color = factor(p))\n    ) +\n    scale_x_continuous(breaks = NULL) +\n    labs(\n      color = 'p',\n      x = 'ranking',\n      y = 'score',\n      title = 'Scores de todos os rankings',\n      subtitle = 'com k = 2  p = 2 a 10'\n    )\n\n\n\n\n\n\n\nOutros valores de \\(m\\)\n\nO valor de \\(m\\) altera a função \\(s()\\) de maneira a permitir sobreposições:\nPara \\(m = 5\\):\n\ndf &lt;- criar_df_rankings(k = 2, maxp = 10) %&gt;% \n  mutate(\n    s = s(ranking, m = 5),\n    p = ranking %&gt;% map_int(~ .$p)\n  ) %&gt;% \n  arrange(desc(s))\n\nVamos examinar, para uma lista com \\(k = 2\\), os rankings possíveis com \\(p\\) variando de \\(2\\) a \\(10\\).\nSão \\(45\\) rankings:\n\ndf %&gt;%\n  select(ranking_str, p, s) %&gt;% \n  gt()\n\n\n\n\n\nranking_str\np\ns\n\n\n\nxx\n2\n1,0000000\n\n\nx-x\n3\n0,8000000\n\n\n-xx\n3\n0,7333333\n\n\nx--x\n4\n0,6666667\n\n\n-x-x\n4\n0,6333333\n\n\n--xx\n4\n0,6000000\n\n\nx---x\n5\n0,5800000\n\n\n-x--x\n5\n0,5600000\n\n\n--x-x\n5\n0,5400000\n\n\n---xx\n5\n0,5200000\n\n\nx----x\n6\n0,5200000\n\n\n-x---x\n6\n0,5066667\n\n\n--x--x\n6\n0,4933333\n\n\n---x-x\n6\n0,4800000\n\n\nx-----x\n7\n0,4761905\n\n\n----xx\n6\n0,4666667\n\n\n-x----x\n7\n0,4666667\n\n\n--x---x\n7\n0,4571429\n\n\n---x--x\n7\n0,4476190\n\n\nx------x\n8\n0,4428571\n\n\n----x-x\n7\n0,4380952\n\n\n-x-----x\n8\n0,4357143\n\n\n--x----x\n8\n0,4285714\n\n\n-----xx\n7\n0,4285714\n\n\n---x---x\n8\n0,4214286\n\n\nx-------x\n9\n0,4166667\n\n\n----x--x\n8\n0,4142857\n\n\n-x------x\n9\n0,4111111\n\n\n-----x-x\n8\n0,4071429\n\n\n--x-----x\n9\n0,4055556\n\n\n------xx\n8\n0,4000000\n\n\n---x----x\n9\n0,4000000\n\n\nx--------x\n10\n0,3955556\n\n\n----x---x\n9\n0,3944444\n\n\n-x-------x\n10\n0,3911111\n\n\n-----x--x\n9\n0,3888889\n\n\n--x------x\n10\n0,3866667\n\n\n------x-x\n9\n0,3833333\n\n\n---x-----x\n10\n0,3822222\n\n\n-------xx\n9\n0,3777778\n\n\n----x----x\n10\n0,3777778\n\n\n-----x---x\n10\n0,3733333\n\n\n------x--x\n10\n0,3688889\n\n\n-------x-x\n10\n0,3644444\n\n\n--------xx\n10\n0,3600000\n\n\n\n\n\n\n\ndf %&gt;%\n  filter(p &lt;= 5) %&gt;% \n  ggplot() +\n    geom_boxplot(\n      aes(x = p, y = s, group = p, fill = factor(p)),\n      show.legend = FALSE\n    ) +\n    scale_x_continuous(breaks = 2:10) +\n    labs(\n      title = 'Scores de todos os rankings',\n      subtitle = 'com k = 2,  p = 2 a 5',\n      y = 'score'\n    )\n\n\n\n\n\n\n\n\ndf %&gt;%\n  filter(p &gt; 5) %&gt;% \n  ggplot() +\n    geom_boxplot(\n      aes(x = p, y = s, group = p, fill = factor(p)),\n      show.legend = FALSE\n    ) +\n    scale_x_continuous(breaks = 2:10) +\n    labs(\n      title = 'Scores de todos os rankings',\n      subtitle = 'com k = 2,  p = 6 a 10',\n      y = 'score'\n    )\n\n\n\n\n\n\n\n\ndf %&gt;% \n  group_by(p) %&gt;% \n  arrange(s) %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  ungroup() %&gt;% \n  ggplot() +\n    geom_point(\n      aes(id, s, color = factor(p)),\n      size = 2\n    ) +\n    geom_line(\n      aes(id, s, color = factor(p))\n    ) +\n    scale_x_continuous(breaks = NULL) +\n    labs(\n      color = 'p',\n      x = 'ranking',\n      y = 'score',\n      title = 'Scores de todos os rankings',\n      subtitle = 'com k = 2  p = 2 a 10'\n    )",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>O *ranking* concorda com a lista? Posições</span>"
    ]
  }
]