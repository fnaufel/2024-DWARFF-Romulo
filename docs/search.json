[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Comparando listas e rankings",
    "section": "",
    "text": "Apresentação\n???",
    "crumbs": [
      "Apresentação"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html",
    "href": "gerar-listas-e-rankings.html",
    "title": "\n1  Listas e rankings\n",
    "section": "",
    "text": "1.1 Problema\nVamos trabalhar com listas e rankings sujeitos às seguintes condições:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Listas e *rankings*</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#problema",
    "href": "gerar-listas-e-rankings.html#problema",
    "title": "\n1  Listas e rankings\n",
    "section": "",
    "text": "A lista tem \\(k\\) elementos, \\(k &gt; 0\\), não ordenados.\nO ranking tem \\(p\\) elementos, \\(p \\geq k\\), ordenados, sem empates.\nTodos os elementos da lista também pertencem ao ranking.\nO último elemento do ranking sempre pertence à lista.\nAs identidades dos elementos do ranking não importam — i.e., eles são indistinguíveis, a não ser por pertencerem ou não à lista (e pela ordem que ocupam no ranking, claro).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Listas e *rankings*</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#criando-rankings",
    "href": "gerar-listas-e-rankings.html#criando-rankings",
    "title": "\n1  Listas e rankings\n",
    "section": "\n1.2 Criando rankings\n",
    "text": "1.2 Criando rankings\n\nQuantidade de rankings\n\nDados \\(k &gt; 0\\) e \\(p \\geq k\\) fixos, quantos rankings existem?\nPara montar um ranking:\n\nSabemos que a última posição é ocupada por alguém da lista.\nSó resta escolher as posições dos \\(k - 1\\) elementos restantes da lista dentre as \\(p - 1\\) posições restantes no ranking, o que dá \\(\\binom{p - 1}{k - 1}\\) escolhas.\n\nAssim, a quantidade total de rankings para \\(k\\) e \\(p\\) dados é\n\\[\n\\binom{p - 1}{k - 1}\n\\]\nRepresentação\nConsidere naturais \\(k &gt; 0\\) e \\(p \\geq k\\).\nPodemos representar um ranking através de um string contendo \\(k\\) caracteres “x” e \\(p - k\\) caracteres “-”.\n“x” representa uma posição ocupada por um elemento da lista.\n“-” representa uma posição ocupada por um elemento que não está na lista.\nPor exemplo, para \\(k = 3, p = 5\\), os \\(\\binom{4}{2} = 6\\) rankings possíveis são\n\nxx--x\nx-x-x\nx--xx\n-xx-x\n-x-xx\n--xxx\n\nA tabela a seguir (na verdade, um pedaço do triângulo de Pascal) mostra as quantidades de rankings possíveis para alguns valores de \\(k\\) e \\(p\\):\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(p\\)\n\\(k\\)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n2\n1\n1\n\n\n\n\n\n\n\n\n\n\n3\n1\n2\n1\n\n\n\n\n\n\n\n\n\n4\n1\n3\n3\n1\n\n\n\n\n\n\n\n\n5\n1\n4\n6\n4\n1\n\n\n\n\n\n\n\n6\n1\n5\n10\n10\n5\n1\n\n\n\n\n\n\n7\n1\n6\n15\n20\n15\n6\n1\n\n\n\n\n\n8\n1\n7\n21\n35\n35\n21\n7\n1\n\n\n\n\n9\n1\n8\n28\n56\n70\n56\n28\n8\n1\n\n\n\n10\n1\n9\n36\n84\n126\n126\n84\n36\n9\n1\n\n\n11\n1\n10\n45\n120\n210\n252\n210\n120\n45\n10\n\n\n12\n1\n11\n55\n165\n330\n462\n462\n330\n165\n55\n\n\n13\n1\n12\n66\n220\n495\n792\n924\n792\n495\n220\n\n\n14\n1\n13\n78\n286\n715\n1.287\n1.716\n1.716\n1.287\n715\n\n\n15\n1\n14\n91\n364\n1.001\n2.002\n3.003\n3.432\n3.003\n2.002\n\n\n16\n1\n15\n105\n455\n1.365\n3.003\n5.005\n6.435\n6.435\n5.005\n\n\n17\n1\n16\n120\n560\n1.820\n4.368\n8.008\n11.440\n12.870\n11.440\n\n\n18\n1\n17\n136\n680\n2.380\n6.188\n12.376\n19.448\n24.310\n24.310\n\n\n19\n1\n18\n153\n816\n3.060\n8.568\n18.564\n31.824\n43.758\n48.620\n\n\n20\n1\n19\n171\n969\n3.876\n11.628\n27.132\n50.388\n75.582\n92.378\n\n\n21\n1\n20\n190\n1.140\n4.845\n15.504\n38.760\n77.520\n125.970\n167.960\n\n\n22\n1\n21\n210\n1.330\n5.985\n20.349\n54.264\n116.280\n203.490\n293.930\n\n\n23\n1\n22\n231\n1.540\n7.315\n26.334\n74.613\n170.544\n319.770\n497.420\n\n\n24\n1\n23\n253\n1.771\n8.855\n33.649\n100.947\n245.157\n490.314\n817.190\n\n\n25\n1\n24\n276\n2.024\n10.626\n42.504\n134.596\n346.104\n735.471\n1.307.504\n\n\n26\n1\n25\n300\n2.300\n12.650\n53.130\n177.100\n480.700\n1.081.575\n2.042.975\n\n\n27\n1\n26\n325\n2.600\n14.950\n65.780\n230.230\n657.800\n1.562.275\n3.124.550\n\n\n28\n1\n27\n351\n2.925\n17.550\n80.730\n296.010\n888.030\n2.220.075\n4.686.825\n\n\n29\n1\n28\n378\n3.276\n20.475\n98.280\n376.740\n1.184.040\n3.108.105\n6.906.900\n\n\n30\n1\n29\n406\n3.654\n23.751\n118.755\n475.020\n1.560.780\n4.292.145\n10.015.005\n\n\n\n\n\n\nCriar um ranking a partir de um vetor\nEm vez de especificar as \\(p\\) posições do ranking, pode ser mais compacto especificar as \\(k\\) posições do ranking que são ocupadas por elementos da lista.\nA função rk() faz isso, recebendo um vetor numérico com \\(k\\) elementos e retornando um string.\n\nrk(c(1, 3, 5, 7))\n\n[1] \"x-x-x-x\"\n\n\nObserve que as posições não precisam ser passadas em ordem:\n\nrk(c(3, 7, 5, 1))\n\n[1] \"x-x-x-x\"\n\n\nA função detecta vetores que não podem representar rankings:\n\nrk(c(3, 7, 3, 1))\n\nError in rk(c(3, 7, 3, 1)): Valores precisam ser inteiros positivos, sem repetições.\n\n\n\nrk(c(5, 7, 3, 1.5))\n\nError in rk(c(5, 7, 3, 1.5)): Valores precisam ser inteiros positivos, sem repetições.\n\n\n\nrk(c(5, -7, 3, 1))\n\nError in rk(c(5, -7, 3, 1)): Valores precisam ser inteiros positivos, sem repetições.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Listas e *rankings*</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#outras-funções",
    "href": "gerar-listas-e-rankings.html#outras-funções",
    "title": "\n1  Listas e rankings\n",
    "section": "\n1.3 Outras funções",
    "text": "1.3 Outras funções\nCriar plot\n\nA função criar_plot recebe um ranking e gera um gráfico de pontos, com um ponto para cada elemento.\nNo eixo \\(x\\), a posição do elemento na lista.\nNo eixo \\(y\\), a posição do elemento no ranking.\nA função criar_plot pode receber um segundo argumento, opcional, especificando uma função para calcular o score deste ranking (i.e., alguma forma de correlação entre o ranking e a lista). O score vai ser mostrado no título do gráfico.\nO terceiro argumento especifica se deve ser incluída uma reta de regressão linear via mínimos quadrados. O default é TRUE.\n\nr &lt;- 'x-x-x-xx'\ncriar_plot(r)\n\n\n\n\n\n\n\n\ncriar_plot(r, reta = FALSE)\n\n\n\n\n\n\n\n\ncriar_plot(r, \\(df) { cor(df$pos_lista, df$pos_ranking) %&gt;% round(2) })\n\n\n\n\n\n\n\nCriar uma tibble com todos os rankings\n\nDados valores de \\(p\\) e \\(k\\) (nesta ordem), a função criar_df_rankings() retorna uma tibble com todos os \\(\\binom{p - 1}{k - 1}\\) rankings possíveis.\nSe for passado apenas o valor de \\(p\\), a função retorna uma tibble com todos os rankings possíveis de comprimento \\(p\\) (com \\(k\\) variando de \\(1\\) até \\(p\\)). Exercício: quantos são?\nCada ranking é representado por um string, como descrito na seção sobre a representação de rankings.\nTodos os rankings com \\(p = 8\\) e \\(k = 5\\):\n\ncriar_df_rankings(8, 5)\n\n\n  \n\n\n\nTodos os rankings com \\(p = 5\\):\n\ncriar_df_rankings(5)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Listas e *rankings*</span>"
    ]
  },
  {
    "objectID": "usando-posicoes.html",
    "href": "usando-posicoes.html",
    "title": "\n2  O ranking concorda com a lista? Posições\n",
    "section": "",
    "text": "2.1 Usando \\(p\\) como medida de concordância\nImagine que a lista de \\(k\\) elementos foi definida por uma autoridade, usando critérios que não conhecemos.\nEm uma tentativa de descobrir esses critérios, construímos um modelo para avaliar todos os elementos da população (que inclui os \\(k\\) elementos da lista e outros).\nNosso modelo produz um ranking de todos os elementos. Para facilitar, vamos supor que não há empates no ranking.\nUma pergunta natural sobre a qualidade do ranking produzido é\nA resposta é \\(p\\), a posição, no ranking, do elemento da lista com pior classificação.\nAliás, é por isso que convencionamos, no capítulo anterior, que nossos rankings sempre terminam com um elemento da lista.\nUm exemplo:\nSegundo a medida proposta aqui, \\(r_2\\) é melhor que \\(r_1\\).\nEmbora comparar rankings através de seus valores de \\(p\\) seja simples, podemos examinar medidas alternativas, que sejam mais finas que esta.\nPor exemplo, é discutível se os dois rankings xx---x e ---xxx devem ser considerados igualmente bons; no entanto, ambos têm \\(p = 6\\).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>O *ranking* concorda com a lista? Posições</span>"
    ]
  },
  {
    "objectID": "usando-posicoes.html#usando-p-como-medida-de-concordância",
    "href": "usando-posicoes.html#usando-p-como-medida-de-concordância",
    "title": "\n2  O ranking concorda com a lista? Posições\n",
    "section": "",
    "text": "Quantas posições do ranking são necessárias para incluir todos os \\(k\\) elementos da lista?\n\n\n\n\n\nA lista contém \\(k = 5\\) elementos.\nO ranking \\(r_1\\) é xx-x-xx, com \\(p = 7\\).\nO ranking \\(r_2\\) é -xxxxx, com \\(p = 6\\).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>O *ranking* concorda com a lista? Posições</span>"
    ]
  },
  {
    "objectID": "usando-posicoes.html#usando-p-e-as-posições-dos-elementos-da-lista",
    "href": "usando-posicoes.html#usando-p-e-as-posições-dos-elementos-da-lista",
    "title": "\n2  O ranking concorda com a lista? Posições\n",
    "section": "\n2.2 Usando \\(p\\) e as posições dos elementos da lista",
    "text": "2.2 Usando \\(p\\) e as posições dos elementos da lista\nContando posições -\n\nDado um ranking \\(r\\) com \\(k\\) e \\(p\\), queremos definir uma função \\(s(r)\\) com as seguintes características:\n\n\nSe \\(r\\) não contiver “-”, então \\(s(r) = 1\\). Neste caso, \\(r\\) é um ranking perfeito, que coincide com a lista (por exempĺo, xxxxx). Em casos assim, \\(k = p\\). Vamos definir \\(s\\) como sendo da forma\n\\[\ns(r) = \\frac k p + \\cdots\n\\]\nonde as reticências representam termos que ainda vamos definir. Se \\(r\\) for um ranking perfeito, a parcela \\(k/p\\) será \\(1\\), e vamos definir os termos restantes para que sejam iguais a zero.\n\n\nOs termos restantes devem ter valores maiores quanto melhor for o ranking. Quanto mais próximos do fim do ranking estiverem os caracteres “-”, melhor ele será. Uma quantidade natural seria\n\\[\n\\frac{\\operatorname{soma\\_}}{\\sum_{i = 1, p}i}\n\\quad=\\quad\n\\frac{\\operatorname{soma\\_}}{p(p + 1) / 2}\n\\quad=\\quad\n\\frac{2\\operatorname{soma\\_}}{p(p + 1)}\n\\]\nonde \\(\\operatorname{soma\\_}\\) é a soma das posições ocupadas por “_” em \\(r\\).\nComo queríamos, quando \\(r\\) for um ranking perfeito, \\(\\operatorname{soma\\_} = 0\\), e então \\(s(r) = 1\\).\n\n\nMas também queremos que somente rankings perfeitos tenham \\(s(r) = 1\\). Para isso, considere que um ranking mais próximo do perfeito é da forma\nx...x-x\nOu seja, \\(k = p - 1\\) e \\(\\operatorname{soma\\_} = p - 1\\).\nVamos multiplicar a segunda parcela por \\(\\alpha\\) de forma que \\(s(r) &lt; 1\\) para este ranking quase perfeito:\n\\[\ns(r) = \\frac{p-1}{p} + \\frac{2(p-1)}{p(p+1)} \\cdot \\alpha\n\\]\nEntão\n\\[\n\\begin{aligned}\n  s(r) &lt; 1\n  &\\iff \\frac{2(p-1)}{p(p+1)} \\cdot \\alpha &lt; \\frac1p \\\\\n  &\\iff 2 \\alpha (p - 1) &lt; p + 1 \\\\\n  &\\iff \\alpha &lt; \\frac12 \\cdot \\frac{p + 1}{p - 1} \\\\\n  &\\iff \\alpha = \\frac1m \\cdot \\frac{p + 1}{p - 1} & (m &gt; 2)\n\\end{aligned}\n\\]\no que dá\n\\[\n\\begin{aligned}\ns(r)\n&= \\frac{k}{p} + \\frac{2\\operatorname{soma\\_}}{p(p+1)} \\cdot \\alpha \\\\\n&= \\frac{k}{p} + \\frac{2\\operatorname{soma\\_}}{p(p+1)} \\cdot\n  \\frac1m \\cdot \\frac{p + 1}{p - 1} & (m &gt; 2) \\\\\n&= \\frac{k}{p} + \\frac{2\\operatorname{soma\\_}}{p(p-1)} \\cdot\n  \\frac1m & (m &gt; 2) \\\\\n&= \\frac{k}{p} + \\frac{\\operatorname{soma\\_}}{p(p-1)} \\cdot\n  \\frac2m & (m &gt; 2)\n\\end{aligned}\n\\]\nDependendo do valor de \\(m &gt; 2\\) escolhido, teremos medidas diferentes.\nA função abaixo usa o default de \\(m = 2{,}5\\), mas valores diferentes podem ser passados.\n\n\n\ns &lt;- function(ranking, m = 2.5) {\n  \n  # Vetor de caracteres\n  ranking &lt;- str_split(ranking, '')[[1]]\n  \n  p &lt;- length(ranking)\n  k &lt;- sum(ranking == 'x')\n  soma_ &lt;- sum(which(ranking == '-'))\n\n  (k / p) + ((2 * soma_) / (m * p * (p - 1)))\n\n}\n\ns &lt;- Vectorize(s)\n\nPara \\(p = 8\\), alguns exemplos:\n\ns(\n  c(\n    'xxxxxxxx',\n    'xxxxxx-x',\n    '-xxxxxxx'\n  )\n)\n\n xxxxxxxx  xxxxxx-x  -xxxxxxx \n1,0000000 0,9750000 0,8892857 \n\n\nTodos os rankings de comprimento \\(8\\), com suas pontuações:\n\ndf &lt;- criar_df_rankings(8) %&gt;% \n  mutate(\n    s = s(ranking)\n  ) %&gt;% \n  arrange(desc(s))\n\ndf\n\n\n  \n\n\n\nPerceba que pode haver empates: xxxx--xx e xxx-xx-x têm o mesmo valor de \\(s\\). É razoável achar que estes dois rankings têm a mesma qualidade.\nComparando rankings com valores diferentes de \\(p\\)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>O *ranking* concorda com a lista? Posições</span>"
    ]
  }
]