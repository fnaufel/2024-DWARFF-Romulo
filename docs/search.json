[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Comparando listas e rankings",
    "section": "",
    "text": "Apresentação\n???",
    "crumbs": [
      "Apresentação"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html",
    "href": "gerar-listas-e-rankings.html",
    "title": "\n1  Gerar e visualizar exemplos\n",
    "section": "",
    "text": "1.1 Problema\nCondições:\nDadas estas condições, desenvolver funções para",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Gerar e visualizar exemplos</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#problema",
    "href": "gerar-listas-e-rankings.html#problema",
    "title": "\n1  Gerar e visualizar exemplos\n",
    "section": "",
    "text": "A expert list (lista) tem \\(k\\) elementos, \\(k &gt; 0\\), não necessariamente ordenados.\nO ranking tem \\(p\\) elementos, \\(p \\geq k\\), ordenados, sem empates.\nTodos os elementos da lista estão no ranking.\nO último elemento do ranking é elemento da lista.\n\n\n\nCriar exemplos com pares de listas e rankings, cada par em uma tibble.\nConstruir tabelas coloridas mostrando as posições dos elementos da lista no ranking.\nCalcular diferentes medidas de correlação entre lista e ranking.\nConstruir gráficos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Gerar e visualizar exemplos</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#criando-exemplos",
    "href": "gerar-listas-e-rankings.html#criando-exemplos",
    "title": "\n1  Gerar e visualizar exemplos\n",
    "section": "\n1.2 Criando exemplos",
    "text": "1.2 Criando exemplos\nQuantidade de exemplos\nDados \\(k &gt; 0\\) e \\(p \\geq k\\) fixos, quantos exemplos existem?\nA lista é \\(L = \\{ a_1, \\ldots, a_k \\}\\).\nPara montar um ranking:\n\n\nEscolher um elemento da lista para ser o último do ranking:\n\\(k\\) escolhas.\n\n\nEscolher a ordenação dos \\(k - 1\\) elementos restantes da lista:\n\\((k - 1)!\\) escolhas.\n\n\nEscolher as posições dos \\(k - 1\\) elementos restantes da lista dentre as \\(p - 1\\) posições restantes no ranking:\n\\(\\binom{p - 1}{k - 1}\\) escolhas.\n\n\nQuantidade total de rankings:\n\\[\nk \\cdot (k - 1)! \\cdot \\binom{p - 1}{k - 1}\n\\quad=\\quad\nk! \\cdot \\binom{p - 1}{k - 1}\n\\]\n\n\n\n\n\n\nAtenção\n\n\n\nOs cálculos consideram os \\(p - k\\) elementos do ranking que não estão na lista como indistinguíveis.\nSó a presença deles importa, a identidade não.\nVeja o exemplo a seguir, onde estes elementos são escritos como “?”.\n\nA lista tem \\(k = 2\\) elementos, chamados de \\(a\\) e \\(b\\).\nO ranking tem \\(p = 4\\) elementos.\n\nOs \\(6\\) rankings possíveis são\n\n\\(?\\;?\\;a\\;b\\)\n\\(?\\;a\\;?\\;b\\)\n\\(a\\;?\\;?\\;b\\)\n\\(?\\;?\\;b\\;a\\)\n\\(?\\;b\\;?\\;a\\)\n\\(b\\;?\\;?\\;a\\)\n\n\n\n\n\nQuantidades de rankings:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\\(p\\)\n\\(k\\)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n1\n1\n\n\n\n\n\n\n\n\n\n\n\n2\n1\n2\n\n\n\n\n\n\n\n\n\n\n3\n1\n4\n6\n\n\n\n\n\n\n\n\n\n4\n1\n6\n18\n24\n\n\n\n\n\n\n\n\n5\n1\n8\n36\n96\n120\n\n\n\n\n\n\n\n6\n1\n10\n60\n240\n600\n720\n\n\n\n\n\n\n7\n1\n12\n90\n480\n1.800\n4.320\n5.040\n\n\n\n\n\n8\n1\n14\n126\n840\n4.200\n15.120\n35.280\n40.320\n\n\n\n\n9\n1\n16\n168\n1.344\n8.400\n40.320\n141.120\n322.560\n362.880\n\n\n\n10\n1\n18\n216\n2.016\n15.120\n90.720\n423.360\n1.451.520\n3.265.920\n3.628.800\n\n\n11\n1\n20\n270\n2.880\n25.200\n181.440\n1.058.400\n4.838.400\n16.329.600\n36.288.000\n\n\n12\n1\n22\n330\n3.960\n39.600\n332.640\n2.328.480\n13.305.600\n59.875.200\n199.584.000\n\n\n13\n1\n24\n396\n5.280\n59.400\n570.240\n4.656.960\n31.933.440\n179.625.600\n798.336.000\n\n\n14\n1\n26\n468\n6.864\n85.800\n926.640\n8.648.640\n69.189.120\n467.026.560\n2.594.592.000\n\n\n15\n1\n28\n546\n8.736\n120.120\n1.441.440\n15.135.120\n138.378.240\n1.089.728.640\n7.264.857.600\n\n\n16\n1\n30\n630\n10.920\n163.800\n2.162.160\n25.225.200\n259.459.200\n2.335.132.800\n18.162.144.000\n\n\n17\n1\n32\n720\n13.440\n218.400\n3.144.960\n40.360.320\n461.260.800\n4.670.265.600\n41.513.472.000\n\n\n18\n1\n34\n816\n16.320\n285.600\n4.455.360\n62.375.040\n784.143.360\n8.821.612.800\n88.216.128.000\n\n\n19\n1\n36\n918\n19.584\n367.200\n6.168.960\n93.562.560\n1.283.143.680\n15.878.903.040\n176.432.256.000\n\n\n20\n1\n38\n1.026\n23.256\n465.120\n8.372.160\n136.745.280\n2.031.644.160\n27.427.196.160\n335.221.286.400\n\n\n\n\n\n\nCriar uma lista com letras maiúsculas\n\ncriar_lista &lt;- function(k) {\n  \n  stopifnot('Argumento deve ser &gt; 0.' = k &gt; 0)\n  sample(LETTERS, k)\n  \n}\n\n\ncriar_lista(10)\n\n [1] \"Z\" \"Y\" \"L\" \"W\" \"S\" \"N\" \"O\" \"F\" \"G\" \"Q\"\n\n\nCriar um ranking a partir de uma lista\nA função vai receber a lista, um vetor com as posições dos elementos da lista no ranking.\nO tamanho \\(p\\) do ranking vai ser o maior valor do vetor de posições (já que o último elemento do ranking precisa ser da lista).\nA função retorna um vetor com o ranking, onde os elementos que não estavam na lista são escritos como “?”.\n\ncriar_ranking &lt;- function(lista, posicoes) {\n  \n  p &lt;- max(posicoes)\n  \n  # Verificar se posicoes contêm só números entre 1 e p, sem repetições\n  stopifnot(\n    'Posições precisam estar entre 1 e p, sem repetições.' =\n    all(between(posicoes, 1, p)) & identical(posicoes, unique(posicoes))\n  )\n  \n  ranking &lt;- rep('?', p)\n  ranking[posicoes] &lt;- lista\n  ranking\n  \n}\n\n\nr &lt;- criar_ranking(\n  LETTERS[1:4],\n  c(2, 6, 1, 3)\n)\n\nr\n\n[1] \"C\" \"A\" \"D\" \"?\" \"?\" \"B\"",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Gerar e visualizar exemplos</span>"
    ]
  },
  {
    "objectID": "gerar-listas-e-rankings.html#representando-um-exemplo",
    "href": "gerar-listas-e-rankings.html#representando-um-exemplo",
    "title": "\n1  Gerar e visualizar exemplos\n",
    "section": "\n1.3 Representando um exemplo",
    "text": "1.3 Representando um exemplo\nComo tibble\n\nPara calcular a correlação entre a lista e o ranking, vamos precisar ordenar a lista de alguma forma, pois, se todos os elementos da lista estiverem empatados (i.e., se todos tiverem o mesmo valor de posição), vamos cair em um caso em que o desvio-padrão é \\(0\\) (quando o ranking só contiver jogadores da lista).\nDado um ranking, a maneira mais conveniente de ordenar a lista afetando a correlação de forma previsível é concordando com o ranking!\nÉ isto que esta função faz.\nAlém disso, os elementos que não estavam na lista mas estão no ranking, se existirem, precisam entrar na tibble.\nEles vão entrar todos empatados no fim da lista, como no exemplo mais abaixo.\nA função retorna uma tibble com as colunas nome, pos_lista e pos_ranking.\n\ncriar_df &lt;- function(ranking) {\n  \n  p &lt;- length(ranking)\n  lista &lt;- ranking[ranking != '?']\n  k &lt;- length(lista)\n  pos_lista &lt;- 1:k\n  pos_ranking &lt;- which(ranking %in% lista)\n  \n  # Linhas com elementos da lista\n  df &lt;- tibble(\n    nome = lista,\n    pos_lista = pos_lista,\n    pos_ranking = pos_ranking\n  )\n  \n  if (p &gt; k) {\n    \n    # Linhas com outros elementos\n    nomes &lt;- rep('?', p - k)\n    pos_lista &lt;- rep((sum((k+1):p) / (p - k)) , p - k)\n    pos_ranking &lt;- which(!(ranking %in% lista))\n    \n    df &lt;- df %&gt;% \n      bind_rows(\n        tibble(\n          nome = nomes,\n          pos_lista = pos_lista,\n          pos_ranking = pos_ranking\n        )\n      )\n      \n  }\n  \n  df\n  \n}\n\n\nr &lt;- criar_ranking(LETTERS[1:4], c(2, 6, 1, 3))\ncriar_df(r)\n\n\n  \n\n\n\nComo tabela\nUma maneira mais compacta ainda de representar um exemplo de ranking.\n\ncriar_tabela &lt;- function(ranking) {\n  \n  df &lt;- criar_df(ranking) %&gt;%\n    select(-pos_lista) %&gt;% \n    arrange(pos_ranking) %&gt;% \n    pivot_wider(\n      names_from = pos_ranking,\n      values_from = nome\n    )\n\n  df %&gt;%\n    gt() %&gt;% \n      tab_style(\n        cell_fill('red'),\n        cells_body(\n          columns = where(~ .x == '?')\n        )\n      )\n  \n}\n\n\nr &lt;- criar_ranking(LETTERS[1:4], c(2, 6, 1, 3))\ncriar_tabela(r)\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n\n\nC\nA\nD\n?\n?\nB\n\n\n\n\n\nAqui, fica claro quais são e em que posições estão os elementos da lista.\nComo gráfico\nA função recebe um ranking, na forma de vetor ou de tibble.\nA função gera um gráfico de pontos, com um ponto para cada elemento.\nNo eixo \\(x\\), a posição do elemento na lista.\nNo eixo \\(y\\), a posição do elemento no ranking.\nA função pode receber, além do ranking, uma função para calcular o score deste ranking (i.e., alguma forma de correlação entre o ranking e a lista). O score vai ser mostrado no título do gráfico.\nOpcionalmente, é incluída uma reta de regressão linear via mínimos quadrados.\n\ncriar_plot &lt;- function(ranking, fun = NULL, reta = TRUE) {\n  \n  if (!is_tibble(ranking)) {\n    ranking &lt;- criar_df(ranking)\n  }\n  \n  df &lt;- ranking\n  p &lt;- nrow(df)\n  \n  grafico &lt;- df %&gt;% \n    ggplot(aes(pos_lista, pos_ranking)) +\n      geom_point() +\n      scale_x_continuous(breaks = 1:p, labels = 1:p, limits = c(1, p)) +\n      scale_y_continuous(breaks = 1:p, labels = 1:p, limits = c(1, p)) +\n      labs(\n        x = 'lista',\n        y = 'ranking'\n      )\n  \n  if (!is.null(fun)) {\n    score &lt;- do.call(fun, list(df))\n    grafico &lt;- grafico + labs(title = paste0('Score = ', score))\n  }\n  \n  if (reta) {\n    grafico &lt;- grafico +\n      geom_smooth(\n        formula = y ~ x,\n        method = 'lm',\n        se = FALSE\n      )\n  }\n  \n  grafico\n\n}\n\n\nr &lt;- criar_ranking(LETTERS[1:4], c(2, 6, 1, 3))\n\n\ncriar_tabela(r)\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n\n\nC\nA\nD\n?\n?\nB\n\n\n\n\n\n\ncriar_plot(r)\n\n\n\n\n\n\n\n\ncriar_plot(r, reta = FALSE)\n\n\n\n\n\n\n\n\ncriar_plot(r, \\(df) { cor(df$pos_lista, df$pos_ranking) %&gt;% round(2) })",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Gerar e visualizar exemplos</span>"
    ]
  }
]