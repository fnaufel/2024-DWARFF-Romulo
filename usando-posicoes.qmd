
{{< include _math.qmd >}}

```{r setup, include=FALSE}
source('_setup.R')
source('rankings.R')
library(gghalves)
library(glue)
library(gt)
conflict_prefer('lag', 'dplyr')
conflict_prefer('lead', 'dplyr')
```

# O *ranking* concorda com a lista? Posições

## Usando $p$ como medida de concordância {#usando-p}

Imagine que a lista de $k$ elementos foi definida por uma autoridade, usando critérios que não conhecemos.

Em uma tentativa de descobrir esses critérios, construímos um modelo para avaliar todos os elementos da população (que incluem os $k$ elementos da lista).

Nosso modelo produz um *ranking* de todos os elementos. Para facilitar, vamos supor que não há empates no *ranking*.

Uma pergunta natural sobre a qualidade do *ranking* produzido é

> Quantas posições do *ranking* são necessárias para incluir todos os $k$ elementos da lista?

A resposta é $p$, a posição, no *ranking*, do elemento da lista com pior classificação.

Aliás, é por isso que convencionamos, no capítulo anterior, que nossos *rankings* sempre terminam com um elemento da lista.

Um exemplo:

* A lista contém $k = 5$ elementos.

* O *ranking* $r_1$ é `xx-x-xx`, com $p = 7$.

* O *ranking* $r_2$ é `-xxxxx`, com $p = 6$.

Segundo a medida proposta aqui, $r_2$ é melhor que $r_1$.

Ou seja, quanto menor o valor de $p$, melhor o *ranking*.

Embora comparar *rankings* através de seus valores de $p$ seja simples, podemos examinar medidas alternativas, que sejam mais finas que esta.

Por exemplo, é discutível se os dois rankings `xx---x` e `---xxx` devem ser considerados igualmente bons; no entanto, ambos têm $p = 6$.


## Usando $p$ e as posições dos elementos da lista

### Contando posições `-`

Dado um *ranking* $r$ com $k$ e $p$, queremos definir uma função $s(r)$ --- $s$ de *score* --- com as seguintes características:

* Se $r$ não contiver "`-`", então $s(r) = 1$. Neste caso, $r$ é um *ranking* perfeito, que coincide com a lista (por exempĺo, `xxxxx`). Em casos assim, $k = p$. Vamos definir $s$ como sendo da forma

  $$
  s(r) = \frac k p + \cdots
  $$

  onde as reticências representam uma parcela que ainda vamos definir. Se $r$ for um *ranking* perfeito, a parcela $k/p$ será $1$, e vamos definir a parcela restante para que seja igual a zero.

* A parcela restante deve ter valor maior quanto melhor for o *ranking*. Quanto mais próximos do fim do *ranking* estiverem os caracteres "`-`", melhor ele será. Uma quantidade natural seria

  $$
  \frac{\operatorname{soma\_}}{\sum_{i = 1, p}i} 
  \quad=\quad 
  \frac{\operatorname{soma\_}}{p(p + 1) / 2}
  \quad=\quad 
  \frac{2\operatorname{soma\_}}{p(p + 1)}
  $$

  onde $\operatorname{soma\_}$ é a soma das posições ocupadas por "`_`" em $r$.
  
  Como queríamos, quando $r$ for um *ranking* perfeito, $\operatorname{soma\_} = 0$, e então $s(r) = 1$.
  
* Mas também queremos que somente *rankings* perfeitos tenham $s(r) = 1$. Para isso, considere que um *ranking* mais próximo do perfeito é da forma

  `x...x-x`
  
  Ou seja, $k = p - 1$ e $\operatorname{soma\_} = p - 1$.
  
  Vamos multiplicar a segunda parcela por $\alpha$ de forma que $s(r) < 1$ para este *ranking* quase perfeito:
  
  $$
  s(r) = \frac{p-1}{p} + \frac{2(p-1)}{p(p+1)} \cdot \alpha
  $$

  Então
  
  $$
  \begin{aligned}
    s(r) < 1 
    &\iff \frac{2(p-1)}{p(p+1)} \cdot \alpha < \frac1p \\
    &\iff 2 \alpha (p - 1) < p + 1 \\
    &\iff \alpha < \frac12 \cdot \frac{p + 1}{p - 1} \\
    &\iff \alpha = \frac1m \cdot \frac{p + 1}{p - 1} & (m > 2)
  \end{aligned}
  $$

  o que dá
  
  $$
  \begin{aligned}
  s(r) 
  &= \frac{k}{p} + \frac{2\operatorname{soma\_}}{p(p+1)} \cdot \alpha \\
  &= \frac{k}{p} + \frac{2\operatorname{soma\_}}{p(p+1)} \cdot 
    \frac1m \cdot \frac{p + 1}{p - 1} & (m > 2) \\
  &= \frac{k}{p} + \frac{2\operatorname{soma\_}}{p(p-1)} \cdot 
    \frac1m & (m > 2) \\
  &= \frac{k}{p} + \frac{\operatorname{soma\_}}{p(p-1)} \cdot 
    \frac2m & (m > 2)
  \end{aligned}
  $$

  Dependendo do valor de $m > 2$ escolhido, teremos medidas diferentes.
  
  A função que implementamos usa o *default* de $m = 10$, mas valores diferentes podem ser passados.

```{r}
s1 <- function(um_rk, m) {
  
  p <- um_rk$p
  k <- um_rk$k
  soma_ <- sum(um_rk$no)

  (k / p) + ((2 * soma_) / (m * p * (p - 1)))

}

s <- function(rk, m = 10) {

  if (is.rk(rk)) {
    s1(rk, m)
  } else {
    rk %>% map_dbl(s1, m)
  }

}
```

```{r echo=TRUE}
r <- rk('xxx-x')
s(r)
```

Para $p = 8$, alguns exemplos:

```{r echo=TRUE}
s(
  list(
    rk('xxxxxxxx'),
    rk('xxxxxx-x'),
    rk('-xxxxxxx')
  )
)
```

Eis todos os *rankings* de comprimento $8$, com suas pontuações:

```{r}
df <- criar_df_rankings(8) %>% 
  mutate(
    s = s(ranking)
  ) %>% 
  arrange(desc(s))

df %>% 
  select(ranking_str, s) %>% 
  gt()
```

Perceba que pode haver empates: `xxxx--xx` e `xxx-xx-x` têm o mesmo valor de $s$. É razoável achar que estes dois *rankings* têm a mesma qualidade.


### Comparando *rankings* com valores diferentes de $p$ 

Como a lista é dada e fixa, só faz sentido, na prática, comparar *rankings* com o mesmo valor de $k$.

```{r}
df <- criar_df_rankings(k = 2, maxp = 10) %>% 
  mutate(
    s = s(ranking),
    p = ranking %>% map_int(~ .$p)
  ) %>% 
  arrange(desc(s))
```

Vamos examinar, para uma lista com $k = 2$, os *rankings* possíveis com $p$ variando de $2$ a $10$. 

São $`r nrow(df)`$ *rankings*:

```{r}
df %>%
  select(ranking_str, p, s) %>% 
  gt()
```

Os gráficos abaixo mostram os *scores* atribuídos para todos os *rankings* com $k = 2$ e $p$ variando de $2$ a $10$, separados por valores de $p$:

```{r}
df %>%
  filter(p <= 5) %>% 
  ggplot() +
    geom_boxplot(
      aes(x = p, y = s, group = p, fill = factor(p)),
      show.legend = FALSE
    ) +
    scale_x_continuous(breaks = 2:10) +
    labs(
      title = 'Scores de todos os rankings',
      subtitle = 'com k = 2,  p = 2 a 5',
      y = 'score'
    )
```

```{r}
df %>%
  filter(p > 5) %>% 
  ggplot() +
    geom_boxplot(
      aes(x = p, y = s, group = p, fill = factor(p)),
      show.legend = FALSE
    ) +
    scale_x_continuous(breaks = 2:10) +
    labs(
      title = 'Scores de todos os rankings',
      subtitle = 'com k = 2,  p = 6 a 10',
      y = 'score'
    )
```

```{r}
df %>% 
  group_by(p) %>% 
  arrange(s) %>% 
  mutate(id = 1:n()) %>% 
  ungroup() %>% 
  ggplot() +
    geom_point(
      aes(id, s, color = factor(p)),
      size = 2
    ) +
    geom_line(
      aes(id, s, color = factor(p))
    ) +
    scale_x_continuous(breaks = NULL) +
    labs(
      color = 'p',
      x = 'ranking',
      y = 'score',
      title = 'Scores de todos os rankings',
      subtitle = 'com k = 2  p = 2 a 10'
    )
```

